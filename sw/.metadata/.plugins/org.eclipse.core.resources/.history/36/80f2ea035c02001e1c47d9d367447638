/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "stdlib.h"
#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "math.h"
#include "xaxidma.h"
#include "xtime_l.h"
#include "sleep.h"
#include "xtop_module.h"


XRk4_lbe doGain;
XRk4_lbe_Config *doGain_cfg;
XAxiDma axiDMA;
XAxiDma_Config *axiDMA_cfg;

void initPeripherals() {
	//printf("Inicia RK4_LBE\n");
	doGain_cfg = XRk4_lbe_LookupConfig(XPAR_RK4_LBE_0_DEVICE_ID);
	if (doGain_cfg) {
		int status = XRk4_lbe_CfgInitialize(&doGain, doGain_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing doGain core\n");
	}

	//printf("Inicia esse disgramado do AxiDMA\n");
	axiDMA_cfg = XAxiDma_LookupConfig(XPAR_AXIDMA_0_DEVICE_ID);
	if (axiDMA_cfg) {
		int status = XAxiDma_CfgInitialize(&axiDMA, axiDMA_cfg);
		if (status != XST_SUCCESS)
			printf("Error initializing AxiDMA core\n");
	}

	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&axiDMA, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);
}


int main() {
conv xilinx_enjoada;
	float *m_dma_buffer_RX =(float*) &outStreamData;


	//	float *m_dma_buffer_RX = (float*) RX_BUFFER_BASE;
	initPeripherals();
	sleep(3);




    // ativa o debounce ate a configuracao completar
	config_cam();

	// ativa o stop e pausa imagem  no vsync '1'
	pausar_imagem();


	// Le a imagem para final_image

	Vis_readImage(final_image);


	// passa a imagem pela interface UART- leitura matlab
	for (int i = 0; i < TIMG_HEIGTH; i++) {
		for (int j = 0; j < TIMG_WIDTH; j++) {
		//xil_printf("%d\n", final_image[i][j]);
		soma=soma+(int)final_image[i][j];
		}
	}

	media=(float)soma/ (float)(TIMG_HEIGTH*TIMG_WIDTH);
	media=media*xpmedia+0.5;
	xilinx_enjoada.f=media;



	XTime_GetTime(&tStartFPGA);

	XRk4_lbe_Set_media(&doGain,xilinx_enjoada.i);
	XRk4_lbe_Start(&doGain);

		Xil_DCacheFlushRange((u32) 0, SIZE_ARR * sizeof(int));
		Xil_DCacheFlushRange((u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int));

	//	printf("Passa\n");
		XAxiDma_SimpleTransfer(&axiDMA, (u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int), XAXIDMA_DMA_TO_DEVICE);
		XTime_GetTime(&tStartProg);
	//	printf("Recebe\n");
		XAxiDma_SimpleTransfer(&axiDMA, (u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int), XAXIDMA_DEVICE_TO_DMA);
	//	printf("Recebe\n");
		while (XAxiDma_Busy(&axiDMA, XAXIDMA_DEVICE_TO_DMA));
		Xil_DCacheInvalidateRange((u32) m_dma_buffer_RX, SIZE_ARR * sizeof(int));
	//	printf("Recebe\n");
		while (!XRk4_lbe_IsDone(&doGain));
		XTime_GetTime(&tEndFPGA);
		TimeFPGA = (int)tEndFPGA-(int)tStartFPGA;




	for (int idx = 0; idx < SIZE_ARR; idx++) {
		printf("%f\n",outStreamData[idx]);
	}







	return 0;
}
