-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_logmap is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC;
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    u_perm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    u_perm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    u_perm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    u_perm_empty_n : IN STD_LOGIC;
    u_perm_read : OUT STD_LOGIC;
    u_diff_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    u_diff_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    u_diff_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    u_diff_empty_n : IN STD_LOGIC;
    u_diff_read : OUT STD_LOGIC;
    u_dt_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    u_dt_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
    u_dt_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
    u_dt_empty_n : IN STD_LOGIC;
    u_dt_read : OUT STD_LOGIC );
end;


architecture behav of top_module_logmap is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (46 downto 0) := "00000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (46 downto 0) := "00000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (46 downto 0) := "00000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (46 downto 0) := "00000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (46 downto 0) := "00000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (46 downto 0) := "00000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (46 downto 0) := "00000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (46 downto 0) := "00001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (46 downto 0) := "00010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (46 downto 0) := "00100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (46 downto 0) := "01000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (46 downto 0) := "10000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv64_40F86A0000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000011111000011010100000000000000000000000000000000000000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv19_40000 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_3FFFF : STD_LOGIC_VECTOR (18 downto 0) := "0111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (46 downto 0) := "00000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal output_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal u_perm_blk_n : STD_LOGIC;
    signal u_diff_blk_n : STD_LOGIC;
    signal u_dt_blk_n : STD_LOGIC;
    signal grp_fu_324_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_392 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln82_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_398 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_356_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_fu_360_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_420 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_pow_generic_float_s_fu_246_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_437 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_pow_generic_float_s_fu_265_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_443 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_449 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_454 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_modf_double_s_fu_284_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_460 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_generic_modf_double_s_fu_284_ap_done : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_291_ap_done : STD_LOGIC;
    signal ap_block_state12_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_generic_modf_double_s_fu_298_ap_done : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_305_ap_done : STD_LOGIC;
    signal ap_block_state39_on_subcall_done : BOOLEAN;
    signal grp_generic_modf_double_s_fu_291_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_465 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_366_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_476 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_dt_read_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal uu_perm_reg_898 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal uu_diff_reg_905 : STD_LOGIC_VECTOR (63 downto 0);
    signal outHash_last_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outHash_last_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal regslice_both_output_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal icmp_ln98_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv10_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv10_reg_972 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv11_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv11_reg_977 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul10_reg_982 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_378_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul11_reg_987 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_modf_double_s_fu_298_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ret7_reg_992 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_modf_double_s_fu_305_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal call_ret8_reg_997 : STD_LOGIC_VECTOR (63 downto 0);
    signal map_diff_fu_667_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_block_state43_on_subcall_done : BOOLEAN;
    signal trunc_ln508_1_fu_676_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln508_1_reg_1007 : STD_LOGIC_VECTOR (62 downto 0);
    signal grp_fu_312_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal outHash_data_perm_map_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal grp_pow_generic_float_s_fu_246_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_246_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_246_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_246_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_246_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_pow_generic_float_s_fu_265_ap_start : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_265_ap_done : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_265_ap_idle : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_265_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_265_base_r : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_modf_double_s_fu_284_ap_start : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_284_ap_idle : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_284_ap_ready : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_284_x : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_modf_double_s_fu_291_ap_start : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_291_ap_idle : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_291_ap_ready : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_291_x : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_modf_double_s_fu_298_ap_start : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_298_ap_idle : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_298_ap_ready : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_305_ap_start : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_305_ap_idle : STD_LOGIC;
    signal grp_generic_modf_double_s_fu_305_ap_ready : STD_LOGIC;
    signal grp_pow_generic_float_s_fu_246_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (46 downto 0);
    signal ap_NS_fsm_state4 : STD_LOGIC;
    signal ap_NS_fsm_state23 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_pow_generic_float_s_fu_265_ap_start_reg : STD_LOGIC := '0';
    signal grp_generic_modf_double_s_fu_284_ap_start_reg : STD_LOGIC := '0';
    signal grp_generic_modf_double_s_fu_291_ap_start_reg : STD_LOGIC := '0';
    signal grp_generic_modf_double_s_fu_298_ap_start_reg : STD_LOGIC := '0';
    signal grp_generic_modf_double_s_fu_305_ap_start_reg : STD_LOGIC := '0';
    signal i_fu_146 : STD_LOGIC_VECTOR (30 downto 0);
    signal i_8_fu_533_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal x_perm_fu_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal y_perm_1_fu_154 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal x_diff_fu_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_315_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_diff_1_fu_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_perm_2_fu_166 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal y_perm_3_fu_170 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_diff_2_fu_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_diff_3_fu_318_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_diff_3_fu_178 : STD_LOGIC_VECTOR (31 downto 0);
    signal y_diff_2_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_5_fu_182 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_10_fu_598_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_312_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln526_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_324_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_327_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_333_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal grp_fu_347_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_347_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_356_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_366_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal data_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln508_fu_655_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal t_fu_659_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_2_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_3_fu_680_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_fu_692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln534_fu_714_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_718_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_fu_704_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln515_fu_732_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln515_fu_736_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_750_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_11_fu_742_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_756_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_760_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_1_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_728_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln18_fu_772_p1 : STD_LOGIC_VECTOR (168 downto 0);
    signal lshr_ln18_fu_776_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal tmp_12_fu_788_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln18_fu_782_p2 : STD_LOGIC_VECTOR (168 downto 0);
    signal zext_ln21_fu_796_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_800_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_810_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sign_fu_696_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_1_fu_818_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_diff_fu_824_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln124_fu_832_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_835_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_342_ce : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_fu_347_ce : STD_LOGIC;
    signal grp_fu_356_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_fu_360_ce : STD_LOGIC;
    signal grp_fu_366_ce : STD_LOGIC;
    signal grp_fu_370_ce : STD_LOGIC;
    signal grp_fu_384_ce : STD_LOGIC;
    signal grp_fu_388_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal output_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (63 downto 0);
    signal output_stream_TVALID_int_regslice : STD_LOGIC;
    signal output_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_id_V_U_vld_out : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_output_stream_V_dest_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_pow_generic_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        base_r : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_generic_modf_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_module_fptrunc_64ns_32_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_module_dsub_64ns_64ns_64_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_module_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_module_sitodp_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component top_module_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_pow_generic_float_s_fu_246 : component top_module_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_246_ap_start,
        ap_done => grp_pow_generic_float_s_fu_246_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_246_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_246_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_246_base_r,
        ap_return => grp_pow_generic_float_s_fu_246_ap_return);

    grp_pow_generic_float_s_fu_265 : component top_module_pow_generic_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pow_generic_float_s_fu_265_ap_start,
        ap_done => grp_pow_generic_float_s_fu_265_ap_done,
        ap_idle => grp_pow_generic_float_s_fu_265_ap_idle,
        ap_ready => grp_pow_generic_float_s_fu_265_ap_ready,
        ap_ce => ap_const_logic_1,
        base_r => grp_pow_generic_float_s_fu_265_base_r,
        ap_return => grp_pow_generic_float_s_fu_265_ap_return);

    grp_generic_modf_double_s_fu_284 : component top_module_generic_modf_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_modf_double_s_fu_284_ap_start,
        ap_done => grp_generic_modf_double_s_fu_284_ap_done,
        ap_idle => grp_generic_modf_double_s_fu_284_ap_idle,
        ap_ready => grp_generic_modf_double_s_fu_284_ap_ready,
        x => grp_generic_modf_double_s_fu_284_x,
        ap_return => grp_generic_modf_double_s_fu_284_ap_return);

    grp_generic_modf_double_s_fu_291 : component top_module_generic_modf_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_modf_double_s_fu_291_ap_start,
        ap_done => grp_generic_modf_double_s_fu_291_ap_done,
        ap_idle => grp_generic_modf_double_s_fu_291_ap_idle,
        ap_ready => grp_generic_modf_double_s_fu_291_ap_ready,
        x => grp_generic_modf_double_s_fu_291_x,
        ap_return => grp_generic_modf_double_s_fu_291_ap_return);

    grp_generic_modf_double_s_fu_298 : component top_module_generic_modf_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_modf_double_s_fu_298_ap_start,
        ap_done => grp_generic_modf_double_s_fu_298_ap_done,
        ap_idle => grp_generic_modf_double_s_fu_298_ap_idle,
        ap_ready => grp_generic_modf_double_s_fu_298_ap_ready,
        x => reg_420,
        ap_return => grp_generic_modf_double_s_fu_298_ap_return);

    grp_generic_modf_double_s_fu_305 : component top_module_generic_modf_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_modf_double_s_fu_305_ap_start,
        ap_done => grp_generic_modf_double_s_fu_305_ap_done,
        ap_idle => grp_generic_modf_double_s_fu_305_ap_idle,
        ap_ready => grp_generic_modf_double_s_fu_305_ap_ready,
        x => reg_429,
        ap_return => grp_generic_modf_double_s_fu_305_ap_return);

    fptrunc_64ns_32_1_no_dsp_1_U220 : component top_module_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_312_p0,
        dout => grp_fu_312_p1);

    fptrunc_64ns_32_1_no_dsp_1_U221 : component top_module_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_465,
        dout => grp_fu_315_p1);

    fptrunc_64ns_32_1_no_dsp_1_U222 : component top_module_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => call_ret7_reg_992,
        dout => x_diff_3_fu_318_p1);

    fptrunc_64ns_32_1_no_dsp_1_U223 : component top_module_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => call_ret8_reg_997,
        dout => y_diff_2_fu_321_p1);

    fpext_32ns_64_1_no_dsp_1_U224 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_324_p0,
        dout => grp_fu_324_p1);

    fpext_32ns_64_1_no_dsp_1_U225 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_327_p0,
        dout => grp_fu_327_p1);

    fpext_32ns_64_1_no_dsp_1_U226 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_330_p0,
        dout => grp_fu_330_p1);

    fpext_32ns_64_1_no_dsp_1_U227 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_fu_333_p0,
        dout => grp_fu_333_p1);

    fpext_32ns_64_1_no_dsp_1_U228 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => y_diff_3_fu_178,
        dout => conv10_fu_336_p1);

    fpext_32ns_64_1_no_dsp_1_U229 : component top_module_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => reg_443,
        dout => conv11_fu_339_p1);

    dsub_64ns_64ns_64_4_full_dsp_1_U230 : component top_module_dsub_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_342_p0,
        din1 => grp_fu_342_p1,
        ce => grp_fu_342_ce,
        dout => grp_fu_342_p2);

    dsub_64ns_64ns_64_4_full_dsp_1_U231 : component top_module_dsub_64ns_64ns_64_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_347_p0,
        din1 => grp_fu_347_p1,
        ce => grp_fu_347_ce,
        dout => grp_fu_347_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U232 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_356_p0,
        din1 => grp_fu_356_p1,
        ce => grp_fu_356_ce,
        dout => grp_fu_356_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U233 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_360_p0,
        din1 => grp_fu_360_p1,
        ce => grp_fu_360_ce,
        dout => grp_fu_360_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U234 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_366_p0,
        din1 => reg_449,
        ce => grp_fu_366_ce,
        dout => grp_fu_366_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U235 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => uu_diff_reg_905,
        din1 => reg_454,
        ce => grp_fu_370_ce,
        dout => grp_fu_370_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U236 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => uu_diff_reg_905,
        din1 => conv10_reg_972,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U237 : component top_module_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => uu_diff_reg_905,
        din1 => conv11_reg_977,
        ce => ap_const_logic_1,
        dout => grp_fu_378_p2);

    sitodp_32ns_64_2_no_dsp_1_U238 : component top_module_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u_perm_dout,
        ce => grp_fu_384_ce,
        dout => grp_fu_384_p1);

    sitodp_32ns_64_2_no_dsp_1_U239 : component top_module_sitodp_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => u_diff_dout,
        ce => grp_fu_388_ce,
        dout => grp_fu_388_p1);

    regslice_both_output_stream_V_data_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => output_stream_TDATA_int_regslice,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => output_stream_TREADY_int_regslice,
        data_out => output_stream_TDATA,
        vld_out => regslice_both_output_stream_V_data_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_data_V_U_apdone_blk);

    regslice_both_output_stream_V_keep_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv8_FF,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_keep_V_U_ack_in_dummy,
        data_out => output_stream_TKEEP,
        vld_out => regslice_both_output_stream_V_keep_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_keep_V_U_apdone_blk);

    regslice_both_output_stream_V_strb_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv8_FF,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_strb_V_U_ack_in_dummy,
        data_out => output_stream_TSTRB,
        vld_out => regslice_both_output_stream_V_strb_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_strb_V_U_apdone_blk);

    regslice_both_output_stream_V_user_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_user_V_U_ack_in_dummy,
        data_out => output_stream_TUSER,
        vld_out => regslice_both_output_stream_V_user_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_user_V_U_apdone_blk);

    regslice_both_output_stream_V_last_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => outHash_last_reg_961,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_last_V_U_ack_in_dummy,
        data_out => output_stream_TLAST,
        vld_out => regslice_both_output_stream_V_last_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_last_V_U_apdone_blk);

    regslice_both_output_stream_V_id_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_id_V_U_ack_in_dummy,
        data_out => output_stream_TID,
        vld_out => regslice_both_output_stream_V_id_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_id_V_U_apdone_blk);

    regslice_both_output_stream_V_dest_V_U : component top_module_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => ap_const_lv1_0,
        vld_in => output_stream_TVALID_int_regslice,
        ack_in => regslice_both_output_stream_V_dest_V_U_ack_in_dummy,
        data_out => output_stream_TDEST,
        vld_out => regslice_both_output_stream_V_dest_V_U_vld_out,
        ack_out => output_stream_TREADY,
        apdone_blk => regslice_both_output_stream_V_dest_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln98_fu_592_p2 = ap_const_lv1_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_modf_double_s_fu_284_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_modf_double_s_fu_284_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_generic_modf_double_s_fu_284_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_modf_double_s_fu_284_ap_ready = ap_const_logic_1)) then 
                    grp_generic_modf_double_s_fu_284_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_modf_double_s_fu_291_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_modf_double_s_fu_291_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_generic_modf_double_s_fu_291_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_modf_double_s_fu_291_ap_ready = ap_const_logic_1)) then 
                    grp_generic_modf_double_s_fu_291_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_modf_double_s_fu_298_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_modf_double_s_fu_298_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_generic_modf_double_s_fu_298_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_modf_double_s_fu_298_ap_ready = ap_const_logic_1)) then 
                    grp_generic_modf_double_s_fu_298_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_modf_double_s_fu_305_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_modf_double_s_fu_305_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                    grp_generic_modf_double_s_fu_305_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_modf_double_s_fu_305_ap_ready = ap_const_logic_1)) then 
                    grp_generic_modf_double_s_fu_305_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_246_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_246_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state23) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_pow_generic_float_s_fu_246_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_246_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_246_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pow_generic_float_s_fu_265_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pow_generic_float_s_fu_265_ap_start_reg <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_NS_fsm_state23) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_NS_fsm_state4) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
                    grp_pow_generic_float_s_fu_265_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pow_generic_float_s_fu_265_ap_ready = ap_const_logic_1)) then 
                    grp_pow_generic_float_s_fu_265_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_5_fu_182_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then 
                i_5_fu_182 <= ap_const_lv19_0;
            elsif (((icmp_ln98_fu_592_p2 = ap_const_lv1_0) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                i_5_fu_182 <= i_10_fu_598_p2;
            end if; 
        end if;
    end process;

    i_fu_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_146 <= ap_const_lv31_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_1))) then 
                i_fu_146 <= i_8_fu_533_p2;
            end if; 
        end if;
    end process;

    x_diff_2_fu_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then 
                x_diff_2_fu_174 <= x_diff_fu_158;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                x_diff_2_fu_174 <= x_diff_3_fu_318_p1;
            end if; 
        end if;
    end process;

    x_diff_fu_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_diff_fu_158 <= p_read1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_diff_fu_158 <= grp_fu_315_p1;
            end if; 
        end if;
    end process;

    x_perm_2_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then 
                x_perm_2_fu_166 <= x_perm_fu_150;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                x_perm_2_fu_166 <= grp_fu_312_p1;
            end if; 
        end if;
    end process;

    x_perm_fu_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                x_perm_fu_150 <= p_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                x_perm_fu_150 <= grp_fu_312_p1;
            end if; 
        end if;
    end process;

    y_diff_1_fu_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_diff_1_fu_162 <= p_read1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                y_diff_1_fu_162 <= grp_fu_315_p1;
            end if; 
        end if;
    end process;

    y_diff_3_fu_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then 
                y_diff_3_fu_178 <= y_diff_1_fu_162;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                y_diff_3_fu_178 <= y_diff_2_fu_321_p1;
            end if; 
        end if;
    end process;

    y_perm_1_fu_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                y_perm_1_fu_154 <= p_read;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                y_perm_1_fu_154 <= grp_fu_312_p1;
            end if; 
        end if;
    end process;

    y_perm_3_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then 
                y_perm_3_fu_170 <= y_perm_1_fu_154;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
                y_perm_3_fu_170 <= grp_fu_315_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                call_ret7_reg_992 <= grp_generic_modf_double_s_fu_298_ap_return;
                call_ret8_reg_997 <= grp_generic_modf_double_s_fu_305_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                conv10_reg_972 <= conv10_fu_336_p1;
                conv11_reg_977 <= conv11_fu_339_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                mul10_reg_982 <= grp_fu_374_p2;
                mul11_reg_987 <= grp_fu_378_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                outHash_data_perm_map_reg_1012 <= grp_fu_312_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln98_fu_592_p2 = ap_const_lv1_0) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                outHash_last_reg_961 <= outHash_last_fu_604_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_1)))) then
                reg_392 <= grp_fu_324_p1;
                reg_398 <= grp_fu_327_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_404 <= grp_fu_356_p2;
                reg_420 <= grp_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state7))) then
                reg_412 <= grp_fu_342_p2;
                reg_429 <= grp_fu_347_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state10))) then
                reg_437 <= grp_pow_generic_float_s_fu_246_ap_return;
                reg_443 <= grp_pow_generic_float_s_fu_265_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_449 <= grp_fu_330_p1;
                reg_454 <= grp_fu_333_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39)) or ((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then
                reg_460 <= grp_generic_modf_double_s_fu_284_ap_return;
                reg_465 <= grp_generic_modf_double_s_fu_291_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15))) then
                reg_470 <= grp_fu_366_p2;
                reg_476 <= grp_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                trunc_ln508_1_reg_1007 <= trunc_ln508_1_fu_676_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                u_dt_read_reg_883 <= u_dt_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                uu_diff_reg_905 <= grp_fu_388_p1;
                uu_perm_reg_898 <= grp_fu_384_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state3, icmp_ln82_fu_528_p2, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state20, ap_block_state20_on_subcall_done, ap_CS_fsm_state39, ap_block_state39_on_subcall_done, ap_CS_fsm_state22, regslice_both_output_stream_V_data_V_U_apdone_blk, icmp_ln98_fu_592_p2, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, output_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln82_fu_528_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln98_fu_592_p2 = ap_const_lv1_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln98_fu_592_p2 = ap_const_lv1_0) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state44;
                else
                    ap_NS_fsm <= ap_ST_fsm_state43;
                end if;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (output_stream_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state46;
                end if;
            when ap_ST_fsm_state47 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state47) and (output_stream_TREADY_int_regslice = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln515_fu_736_p2 <= std_logic_vector(unsigned(zext_ln515_fu_732_p1) + unsigned(ap_const_lv12_C01));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state23 <= ap_NS_fsm(22);
    ap_NS_fsm_state4 <= ap_NS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(ap_block_state12_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state12_on_subcall_done)) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n)
    begin
        if (((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(ap_block_state20_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state20_on_subcall_done)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(regslice_both_output_stream_V_data_V_U_apdone_blk)
    begin
        if ((regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;

    ap_ST_fsm_state39_blk_assign_proc : process(ap_block_state39_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state39_on_subcall_done)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;

    ap_ST_fsm_state43_blk_assign_proc : process(ap_block_state43_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state43_on_subcall_done)) then 
            ap_ST_fsm_state43_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state43_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state44_blk <= ap_const_logic_0;
    ap_ST_fsm_state45_blk <= ap_const_logic_0;

    ap_ST_fsm_state46_blk_assign_proc : process(output_stream_TREADY_int_regslice)
    begin
        if ((output_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state46_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state46_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state47_blk_assign_proc : process(output_stream_TREADY_int_regslice)
    begin
        if ((output_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state47_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state47_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n)
    begin
                ap_block_state1 <= ((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state12_on_subcall_done_assign_proc : process(grp_generic_modf_double_s_fu_284_ap_done, grp_generic_modf_double_s_fu_291_ap_done)
    begin
                ap_block_state12_on_subcall_done <= ((grp_generic_modf_double_s_fu_291_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_284_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(grp_generic_modf_double_s_fu_284_ap_done, grp_generic_modf_double_s_fu_291_ap_done)
    begin
                ap_block_state20_on_subcall_done <= ((grp_generic_modf_double_s_fu_291_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_284_ap_done = ap_const_logic_0));
    end process;


    ap_block_state39_on_subcall_done_assign_proc : process(grp_generic_modf_double_s_fu_284_ap_done, grp_generic_modf_double_s_fu_291_ap_done, grp_generic_modf_double_s_fu_298_ap_done, grp_generic_modf_double_s_fu_305_ap_done)
    begin
                ap_block_state39_on_subcall_done <= ((grp_generic_modf_double_s_fu_305_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_298_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_291_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_284_ap_done = ap_const_logic_0));
    end process;


    ap_block_state43_on_subcall_done_assign_proc : process(grp_generic_modf_double_s_fu_284_ap_done, grp_generic_modf_double_s_fu_291_ap_done)
    begin
                ap_block_state43_on_subcall_done <= ((grp_generic_modf_double_s_fu_291_ap_done = ap_const_logic_0) or (grp_generic_modf_double_s_fu_284_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state22, regslice_both_output_stream_V_data_V_U_apdone_blk, icmp_ln98_fu_592_p2)
    begin
        if (((icmp_ln98_fu_592_p2 = ap_const_lv1_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state22, regslice_both_output_stream_V_data_V_U_apdone_blk, icmp_ln98_fu_592_p2)
    begin
        if (((icmp_ln98_fu_592_p2 = ap_const_lv1_1) and (regslice_both_output_stream_V_data_V_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln124_fu_832_p1 <= outHash_data_perm_map_reg_1012;
    bitcast_ln526_fu_687_p1 <= t_3_fu_680_p3;
    data_1_fu_692_p1 <= grp_fu_356_p2;
    data_2_fu_672_p1 <= grp_generic_modf_double_s_fu_291_ap_return;
    data_fu_651_p1 <= grp_generic_modf_double_s_fu_284_ap_return;

    grp_fu_312_p0_assign_proc : process(reg_460, ap_CS_fsm_state44, ap_CS_fsm_state13, ap_CS_fsm_state21, ap_CS_fsm_state40, bitcast_ln526_fu_687_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_312_p0 <= bitcast_ln526_fu_687_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_312_p0 <= reg_460;
        else 
            grp_fu_312_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_324_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state30, x_perm_fu_150, y_perm_1_fu_154, x_perm_2_fu_166)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_324_p0 <= x_perm_2_fu_166;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_324_p0 <= y_perm_1_fu_154;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_324_p0 <= x_perm_fu_150;
        else 
            grp_fu_324_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_327_p0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state11, ap_CS_fsm_state30, reg_437, x_diff_fu_158, y_perm_3_fu_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_327_p0 <= y_perm_3_fu_170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_327_p0 <= reg_437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_327_p0 <= x_diff_fu_158;
        else 
            grp_fu_327_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_p0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state30, reg_437, y_diff_1_fu_162)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_330_p0 <= reg_437;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_330_p0 <= y_diff_1_fu_162;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_333_p0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state30, reg_443, x_diff_2_fu_174)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_333_p0 <= x_diff_2_fu_174;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_333_p0 <= reg_443;
        else 
            grp_fu_333_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_ce_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state19, ap_CS_fsm_state42, ap_CS_fsm_state39, ap_block_state39_on_subcall_done, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state40, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_fu_342_ce <= ap_const_logic_1;
        else 
            grp_fu_342_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_342_p0_assign_proc : process(reg_404, reg_420, ap_CS_fsm_state39, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state39))) then 
            grp_fu_342_p0 <= reg_420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_342_p0 <= reg_404;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_342_p0 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_342_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(reg_392, reg_420, reg_429, ap_CS_fsm_state39, reg_470, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_342_p1 <= reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_342_p1 <= reg_470;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_342_p1 <= reg_420;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_342_p1 <= reg_392;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_ce_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state19, ap_CS_fsm_state42, ap_CS_fsm_state39, ap_block_state39_on_subcall_done, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state40, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_state39_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            grp_fu_347_ce <= ap_const_logic_1;
        else 
            grp_fu_347_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_347_p0_assign_proc : process(reg_404, ap_CS_fsm_state39, reg_470, mul10_reg_982, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_347_p0 <= reg_404;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_347_p0 <= mul10_reg_982;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_347_p0 <= reg_470;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            grp_fu_347_p0 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_347_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_347_p1_assign_proc : process(reg_398, reg_412, reg_454, ap_CS_fsm_state39, reg_476, mul11_reg_987, ap_CS_fsm_state4, ap_CS_fsm_state16, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_fu_347_p1 <= reg_412;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_347_p1 <= mul11_reg_987;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_347_p1 <= reg_454;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_347_p1 <= reg_476;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_347_p1 <= reg_398;
        else 
            grp_fu_347_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_ce_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state43, ap_block_state43_on_subcall_done, ap_CS_fsm_state44, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state14, ap_CS_fsm_state45, output_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_state43_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state43)) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) 
    and (ap_const_logic_1 = ap_CS_fsm_state12)) or ((ap_const_logic_1 = ap_CS_fsm_state46) and (output_stream_TREADY_int_regslice = ap_const_logic_1)))) then 
            grp_fu_356_ce <= ap_const_logic_1;
        else 
            grp_fu_356_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_356_p0_assign_proc : process(reg_404, ap_CS_fsm_state12, uu_perm_reg_898, map_diff_fu_667_p1, ap_CS_fsm_state43, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_356_p0 <= map_diff_fu_667_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_356_p0 <= reg_404;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_356_p0 <= uu_perm_reg_898;
        else 
            grp_fu_356_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_356_p1_assign_proc : process(reg_392, reg_412, ap_CS_fsm_state12, ap_CS_fsm_state43, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_356_p1 <= ap_const_lv64_40F86A0000000000;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_356_p1 <= reg_412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_356_p1 <= reg_392;
        else 
            grp_fu_356_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_ce_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_360_ce <= ap_const_logic_1;
        else 
            grp_fu_360_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_360_p0_assign_proc : process(reg_420, ap_CS_fsm_state12, reg_476, uu_perm_reg_898, uu_diff_reg_905, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_360_p0 <= reg_476;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_360_p0 <= uu_perm_reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_360_p0 <= reg_420;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_360_p0 <= uu_diff_reg_905;
        else 
            grp_fu_360_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_360_p1_assign_proc : process(reg_398, reg_429, ap_CS_fsm_state12, ap_CS_fsm_state4, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
            grp_fu_360_p1 <= reg_429;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_fu_360_p1 <= reg_398;
        else 
            grp_fu_360_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_366_ce_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_366_ce <= ap_const_logic_1;
        else 
            grp_fu_366_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_366_p0_assign_proc : process(ap_CS_fsm_state12, uu_perm_reg_898, uu_diff_reg_905, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_366_p0 <= uu_perm_reg_898;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_366_p0 <= uu_diff_reg_905;
        else 
            grp_fu_366_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_370_ce_assign_proc : process(ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_block_state12_on_subcall_done, ap_CS_fsm_state13, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_const_boolean_0 = ap_block_state12_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            grp_fu_370_ce <= ap_const_logic_1;
        else 
            grp_fu_370_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_384_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_384_ce <= ap_const_logic_1;
        else 
            grp_fu_384_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_388_ce_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_388_ce <= ap_const_logic_1;
        else 
            grp_fu_388_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_generic_modf_double_s_fu_284_ap_start <= grp_generic_modf_double_s_fu_284_ap_start_reg;

    grp_generic_modf_double_s_fu_284_x_assign_proc : process(reg_404, reg_412, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state39, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_generic_modf_double_s_fu_284_x <= reg_412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            grp_generic_modf_double_s_fu_284_x <= reg_404;
        else 
            grp_generic_modf_double_s_fu_284_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_modf_double_s_fu_291_ap_start <= grp_generic_modf_double_s_fu_291_ap_start_reg;

    grp_generic_modf_double_s_fu_291_x_assign_proc : process(reg_412, reg_420, reg_429, ap_CS_fsm_state12, ap_CS_fsm_state20, ap_CS_fsm_state39, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            grp_generic_modf_double_s_fu_291_x <= reg_412;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            grp_generic_modf_double_s_fu_291_x <= reg_429;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_generic_modf_double_s_fu_291_x <= reg_420;
        else 
            grp_generic_modf_double_s_fu_291_x <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_modf_double_s_fu_298_ap_start <= grp_generic_modf_double_s_fu_298_ap_start_reg;
    grp_generic_modf_double_s_fu_305_ap_start <= grp_generic_modf_double_s_fu_305_ap_start_reg;
    grp_pow_generic_float_s_fu_246_ap_start <= grp_pow_generic_float_s_fu_246_ap_start_reg;

    grp_pow_generic_float_s_fu_246_base_r_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, y_perm_1_fu_154, y_perm_3_fu_170)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_pow_generic_float_s_fu_246_base_r <= y_perm_3_fu_170;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_pow_generic_float_s_fu_246_base_r <= y_perm_1_fu_154;
        else 
            grp_pow_generic_float_s_fu_246_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_pow_generic_float_s_fu_265_ap_start <= grp_pow_generic_float_s_fu_265_ap_start_reg;

    grp_pow_generic_float_s_fu_265_base_r_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state23, y_diff_1_fu_162, y_diff_3_fu_178)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_pow_generic_float_s_fu_265_base_r <= y_diff_3_fu_178;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_pow_generic_float_s_fu_265_base_r <= y_diff_1_fu_162;
        else 
            grp_pow_generic_float_s_fu_265_base_r <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_10_fu_598_p2 <= std_logic_vector(unsigned(i_5_fu_182) + unsigned(ap_const_lv19_1));
    i_8_fu_533_p2 <= std_logic_vector(unsigned(i_fu_146) + unsigned(ap_const_lv31_1));
    icmp_ln82_fu_528_p2 <= "1" when (signed(zext_ln70_fu_524_p1) < signed(u_dt_read_reg_883)) else "0";
    icmp_ln98_fu_592_p2 <= "1" when (i_5_fu_182 = ap_const_lv19_40000) else "0";
    l_diff_fu_824_p3 <= 
        result_1_fu_818_p2 when (xs_sign_fu_696_p3(0) = '1') else 
        val_fu_810_p3;
    lshr_ln18_fu_776_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_728_p1),to_integer(unsigned('0' & zext_ln18_fu_772_p1(31-1 downto 0)))));
    mantissa_fu_718_p4 <= ((ap_const_lv1_1 & trunc_ln534_fu_714_p1) & ap_const_lv1_0);
    map_diff_fu_667_p1 <= t_fu_659_p3;
    outHash_last_fu_604_p2 <= "1" when (i_5_fu_182 = ap_const_lv19_3FFFF) else "0";

    output_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, output_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            output_stream_TDATA_blk_n <= output_stream_TREADY_int_regslice;
        else 
            output_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_stream_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_835_p3),64));
    output_stream_TVALID <= regslice_both_output_stream_V_data_V_U_vld_out;

    output_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state46, output_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) and (output_stream_TREADY_int_regslice = ap_const_logic_1))) then 
            output_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    result_1_fu_818_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_fu_810_p3));
    select_ln18_fu_760_p3 <= 
        sext_ln18_fu_756_p1 when (tmp_11_fu_742_p3(0) = '1') else 
        add_ln515_fu_736_p2;
        sext_ln18_1_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_760_p3),32));

        sext_ln18_fu_756_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_750_p2),12));

    shl_ln18_fu_782_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_728_p1),to_integer(unsigned('0' & zext_ln18_fu_772_p1(31-1 downto 0)))));
    sub_ln18_fu_750_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_704_p4));
    t_3_fu_680_p3 <= (ap_const_lv1_0 & trunc_ln508_1_reg_1007);
    t_fu_659_p3 <= (ap_const_lv1_0 & trunc_ln508_fu_655_p1);
    tmp_11_fu_742_p3 <= add_ln515_fu_736_p2(11 downto 11);
    tmp_12_fu_788_p3 <= lshr_ln18_fu_776_p2(53 downto 53);
    tmp_13_fu_800_p4 <= shl_ln18_fu_782_p2(60 downto 53);
    tmp_8_fu_835_p3 <= (l_diff_fu_824_p3 & bitcast_ln124_fu_832_p1);
    trunc_ln508_1_fu_676_p1 <= data_2_fu_672_p1(63 - 1 downto 0);
    trunc_ln508_fu_655_p1 <= data_fu_651_p1(63 - 1 downto 0);
    trunc_ln534_fu_714_p1 <= data_1_fu_692_p1(52 - 1 downto 0);

    u_diff_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_diff_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_diff_blk_n <= u_diff_empty_n;
        else 
            u_diff_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    u_diff_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n)
    begin
        if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_diff_read <= ap_const_logic_1;
        else 
            u_diff_read <= ap_const_logic_0;
        end if; 
    end process;


    u_dt_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_dt_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_dt_blk_n <= u_dt_empty_n;
        else 
            u_dt_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    u_dt_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n)
    begin
        if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_dt_read <= ap_const_logic_1;
        else 
            u_dt_read <= ap_const_logic_0;
        end if; 
    end process;


    u_perm_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_perm_blk_n <= u_perm_empty_n;
        else 
            u_perm_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    u_perm_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, u_perm_empty_n, u_diff_empty_n, u_dt_empty_n)
    begin
        if ((not(((u_dt_empty_n = ap_const_logic_0) or (u_diff_empty_n = ap_const_logic_0) or (u_perm_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            u_perm_read <= ap_const_logic_1;
        else 
            u_perm_read <= ap_const_logic_0;
        end if; 
    end process;

    val_fu_810_p3 <= 
        zext_ln21_fu_796_p1 when (tmp_11_fu_742_p3(0) = '1') else 
        tmp_13_fu_800_p4;
    xs_exp_fu_704_p4 <= data_1_fu_692_p1(62 downto 52);
    xs_sign_fu_696_p3 <= data_1_fu_692_p1(63 downto 63);
    zext_ln15_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_718_p4),169));
    zext_ln18_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_768_p1),169));
    zext_ln21_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_788_p3),8));
    zext_ln515_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_704_p4),12));
    zext_ln70_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_146),32));
end behav;
