-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_pow_generic_float_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    base_r : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_module_pow_generic_float_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv52_B17217F7D1C : STD_LOGIC_VECTOR (51 downto 0) := "0000000010110001011100100001011111110111110100011100";
    constant ap_const_lv36_B17217F7D : STD_LOGIC_VECTOR (35 downto 0) := "101100010111001000010111111101111101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv9_182 : STD_LOGIC_VECTOR (8 downto 0) := "110000010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv15_4000 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_7FFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "01111111111111111111111111111111";
    constant ap_const_lv32_7F800000 : STD_LOGIC_VECTOR (31 downto 0) := "01111111100000000000000000000000";
    constant ap_const_lv27_4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv10_3FF : STD_LOGIC_VECTOR (9 downto 0) := "1111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv10_382 : STD_LOGIC_VECTOR (9 downto 0) := "1110000010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv25_B8A : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000101110001010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pow_reduce_anonymous_namespace_log0_lut_table_array_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pow_reduce_anonymous_namespace_log0_lut_table_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_log0_lut_table_array_q0 : STD_LOGIC_VECTOR (55 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_q0 : STD_LOGIC_VECTOR (48 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_q0 : STD_LOGIC_VECTOR (43 downto 0);
    signal pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_q0 : STD_LOGIC_VECTOR (26 downto 0);
    signal pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_ce0 : STD_LOGIC;
    signal pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln369_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln369_1_reg_1448 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln369_1_reg_1448_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln369_1_reg_1448_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln369_1_reg_1448_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln369_1_reg_1448_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln369_1_reg_1448_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_1_reg_1453_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_p1_reg_1459_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_435_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1465_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1471 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln508_fu_449_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln508_reg_1476 : STD_LOGIC_VECTOR (22 downto 0);
    signal b_exp_2_fu_469_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_exp_2_reg_1482 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_exp_2_reg_1482_pp0_iter1_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln407_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_reg_1497_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_1_reg_1502_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal log_sum_reg_1508 : STD_LOGIC_VECTOR (55 downto 0);
    signal z3_reg_1518 : STD_LOGIC_VECTOR (43 downto 0);
    signal a_5_fu_772_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal a_5_reg_1528 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_26_reg_1533 : STD_LOGIC_VECTOR (37 downto 0);
    signal add_ln554_1_fu_979_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln554_1_reg_1543 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln554_1_reg_1543_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln554_1_reg_1543_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln554_1_reg_1543_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_1548 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1548_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_reg_1558 : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln3_reg_1558_pp0_iter3_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal trunc_ln3_reg_1558_pp0_iter4_reg : STD_LOGIC_VECTOR (26 downto 0);
    signal r_exp_fu_1067_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_exp_reg_1568 : STD_LOGIC_VECTOR (9 downto 0);
    signal m_diff_lo_fu_1105_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal m_diff_lo_reg_1574 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln531_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln75_fu_674_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_fu_767_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_2_fu_792_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln640_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln188_fu_1124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln73_1_fu_347_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_1_fu_347_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal mul_ln73_2_fu_351_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_2_fu_351_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln73_10_fu_805_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal Elog2_fu_355_p1 : STD_LOGIC_VECTOR (44 downto 0);
    signal mul_ln551_fu_365_p0 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln551_fu_909_p1 : STD_LOGIC_VECTOR (45 downto 0);
    signal mul_ln551_fu_365_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal data_fu_369_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bs_exp_fu_373_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_387_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal b_exp_fu_391_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bs_sig_fu_383_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln369_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln370_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_exp_1_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal index0_fu_453_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln407_2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln369_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln407_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln407_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal b_frac_1_fu_528_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln514_fu_535_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal b_frac_fu_519_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln537_fu_550_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln537_fu_550_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln537_fu_550_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal zext_ln71_cast_fu_586_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal tmp_3_fu_578_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_596_p4 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln71_fu_606_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln68_fu_574_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln73_2_fu_618_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal eZ_fu_610_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln73_fu_626_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal a_fu_564_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal z1_fu_556_p3 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln73_fu_644_p0 : STD_LOGIC_VECTOR (38 downto 0);
    signal mul_ln73_fu_644_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln73_fu_644_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal add_ln73_fu_630_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln73_3_fu_650_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal sub_ln73_fu_654_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal z2_fu_660_p4 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln73_4_fu_670_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_25_fu_697_p4 : STD_LOGIC_VECTOR (34 downto 0);
    signal shl_ln73_3_fu_707_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal eZ_1_fu_689_p3 : STD_LOGIC_VECTOR (48 downto 0);
    signal zext_ln73_6_fu_719_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln73_5_fu_715_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal a_4_fu_679_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln73_1_fu_347_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal shl_ln_fu_739_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal add_ln73_1_fu_723_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln73_9_fu_747_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal sub_ln73_1_fu_751_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln73_4_fu_825_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal eZ_2_fu_817_p3 : STD_LOGIC_VECTOR (56 downto 0);
    signal zext_ln73_11_fu_832_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln73_12_fu_836_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal mul_ln73_2_fu_351_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal shl_ln73_1_fu_846_p3 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln73_2_fu_840_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln73_13_fu_854_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal logn_cast_fu_801_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal zext_ln163_fu_809_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln163_1_fu_864_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln171_1_fu_873_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal zext_ln171_fu_879_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln171_fu_868_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal sub_ln73_2_fu_858_p2 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_28_fu_899_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln551_fu_365_p2 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_27_fu_889_p4 : STD_LOGIC_VECTOR (38 downto 0);
    signal shl_ln2_fu_925_p3 : STD_LOGIC_VECTOR (62 downto 0);
    signal lshr_ln_fu_915_p4 : STD_LOGIC_VECTOR (44 downto 0);
    signal zext_ln551_1_fu_933_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln551_2_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln551_fu_941_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal Elog2_fu_355_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln551_1_fu_947_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal log_sum_1_fu_883_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln554_fu_965_p1 : STD_LOGIC_VECTOR (55 downto 0);
    signal add_ln554_fu_969_p2 : STD_LOGIC_VECTOR (55 downto 0);
    signal sext_ln554_1_fu_975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln3_fu_957_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fix_hi_fu_985_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln5_fu_1017_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1437_p3 : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln592_fu_1044_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_1028_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln592_fu_1047_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln592_1_fu_1053_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_1037_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln592_fu_1059_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln597_fu_360_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln603_1_fu_1080_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal m_diff_fu_1090_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal m_diff_hi_fu_1095_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal Z2_ind_fu_1114_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln18_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_is_NaN_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln407_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_fu_1144_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln407_1_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_1_fu_1156_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln407_2_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_2_fu_1168_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln189_fu_1184_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln189_1_fu_1187_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln189_fu_1191_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal exp_Z1_hi_fu_1207_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_Z1P_m_1_fu_1197_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln645_fu_1231_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln645_fu_1231_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln645_fu_1217_p2 : STD_LOGIC_VECTOR (26 downto 0);
    signal mul_ln645_fu_1231_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln645_fu_1249_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal shl_ln6_fu_1237_p3 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln645_2_fu_1245_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal trunc_ln645_1_fu_1253_p3 : STD_LOGIC_VECTOR (41 downto 0);
    signal zext_ln645_3_fu_1261_p1 : STD_LOGIC_VECTOR (41 downto 0);
    signal add_ln645_1_fu_1265_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal tmp_7_fu_1277_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_exp_1_fu_1285_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal r_exp_2_fu_1290_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_1297_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_1313_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln645_2_fu_1271_p2 : STD_LOGIC_VECTOR (41 downto 0);
    signal tmp_fu_1334_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_4_fu_1344_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln686_fu_1362_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_exp_fu_1366_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal out_sig_fu_1354_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal t_fu_1372_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln407_3_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln407_3_fu_1176_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln356_fu_1382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln657_fu_1307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln657_fu_1399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln658_fu_1320_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln407_4_fu_1391_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln674_fu_1328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln657_fu_1412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln674_fu_1418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln674_1_fu_1424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln657_fu_1404_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1437_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1437_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to5 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln537_fu_550_p10 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln645_fu_1231_p00 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln645_fu_1231_p10 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln73_1_fu_347_p00 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln73_1_fu_347_p10 : STD_LOGIC_VECTOR (46 downto 0);
    signal mul_ln73_2_fu_351_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln73_fu_644_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln73_fu_644_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component top_module_mul_6ns_41ns_47_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (40 downto 0);
        dout : OUT STD_LOGIC_VECTOR (46 downto 0) );
    end component;


    component top_module_mul_6ns_44ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component top_module_mul_9s_45ns_52_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (44 downto 0);
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component top_module_mul_10s_36s_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component top_module_mul_23ns_23ns_46_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (22 downto 0);
        din1 : IN STD_LOGIC_VECTOR (22 downto 0);
        dout : OUT STD_LOGIC_VECTOR (45 downto 0) );
    end component;


    component top_module_mul_25s_6ns_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_module_mul_39ns_4ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (38 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component top_module_mul_18ns_18ns_36_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;


    component top_module_mac_muladd_13s_12ns_16s_25_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log0_lut_table_array_ROM_Acud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (55 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4dEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6eOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (48 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_fYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (43 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_arrg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (26 downto 0) );
    end component;


    component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_arrayhbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_bkb
    generic map (
        DataWidth => 6,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_address0,
        ce0 => pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_ce0,
        q0 => pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_q0);

    pow_reduce_anonymous_namespace_log0_lut_table_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log0_lut_table_array_ROM_Acud
    generic map (
        DataWidth => 56,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_log0_lut_table_array_address0,
        ce0 => pow_reduce_anonymous_namespace_log0_lut_table_array_ce0,
        q0 => pow_reduce_anonymous_namespace_log0_lut_table_array_q0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4dEe
    generic map (
        DataWidth => 52,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_address0,
        ce0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_ce0,
        q0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_q0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6eOg
    generic map (
        DataWidth => 49,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_address0,
        ce0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_ce0,
        q0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_q0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_fYi
    generic map (
        DataWidth => 44,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_address0,
        ce0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_ce0,
        q0 => pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_q0);

    pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_arrg8j
    generic map (
        DataWidth => 27,
        AddressRange => 512,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_address0,
        ce0 => pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_ce0,
        q0 => pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_q0);

    pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_U : component top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_arrayhbi
    generic map (
        DataWidth => 8,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_address0,
        ce0 => pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_ce0,
        q0 => pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_q0);

    mul_6ns_41ns_47_1_1_U192 : component top_module_mul_6ns_41ns_47_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 41,
        dout_WIDTH => 47)
    port map (
        din0 => mul_ln73_1_fu_347_p0,
        din1 => mul_ln73_1_fu_347_p1,
        dout => mul_ln73_1_fu_347_p2);

    mul_6ns_44ns_50_1_1_U193 : component top_module_mul_6ns_44ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 44,
        dout_WIDTH => 50)
    port map (
        din0 => mul_ln73_2_fu_351_p0,
        din1 => mul_ln73_2_fu_351_p1,
        dout => mul_ln73_2_fu_351_p2);

    mul_9s_45ns_52_1_1_U194 : component top_module_mul_9s_45ns_52_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 45,
        dout_WIDTH => 52)
    port map (
        din0 => b_exp_2_reg_1482_pp0_iter1_reg,
        din1 => Elog2_fu_355_p1,
        dout => Elog2_fu_355_p2);

    mul_10s_36s_36_1_1_U195 : component top_module_mul_10s_36s_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 36,
        dout_WIDTH => 36)
    port map (
        din0 => r_exp_fu_1067_p3,
        din1 => ap_const_lv36_B17217F7D,
        dout => mul_ln597_fu_360_p2);

    mul_23ns_23ns_46_1_1_U196 : component top_module_mul_23ns_23ns_46_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 23,
        din1_WIDTH => 23,
        dout_WIDTH => 46)
    port map (
        din0 => mul_ln551_fu_365_p0,
        din1 => mul_ln551_fu_365_p1,
        dout => mul_ln551_fu_365_p2);

    mul_25s_6ns_25_1_1_U197 : component top_module_mul_25s_6ns_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 6,
        dout_WIDTH => 25)
    port map (
        din0 => mul_ln537_fu_550_p0,
        din1 => mul_ln537_fu_550_p1,
        dout => mul_ln537_fu_550_p2);

    mul_39ns_4ns_43_1_1_U198 : component top_module_mul_39ns_4ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 39,
        din1_WIDTH => 4,
        dout_WIDTH => 43)
    port map (
        din0 => mul_ln73_fu_644_p0,
        din1 => mul_ln73_fu_644_p1,
        dout => mul_ln73_fu_644_p2);

    mul_18ns_18ns_36_1_1_U199 : component top_module_mul_18ns_18ns_36_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 36)
    port map (
        din0 => mul_ln645_fu_1231_p0,
        din1 => mul_ln645_fu_1231_p1,
        dout => mul_ln645_fu_1231_p2);

    mac_muladd_13s_12ns_16s_25_4_1_U200 : component top_module_mac_muladd_13s_12ns_16s_25_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 13,
        din1_WIDTH => 12,
        din2_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m_fix_hi_fu_985_p4,
        din1 => grp_fu_1437_p1,
        din2 => shl_ln5_fu_1017_p3,
        ce => grp_fu_1437_ce,
        dout => grp_fu_1437_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                a_5_reg_1528 <= sub_ln73_1_fu_751_p2(49 downto 44);
                and_ln407_1_reg_1502 <= and_ln407_1_fu_513_p2;
                and_ln407_1_reg_1502_pp0_iter1_reg <= and_ln407_1_reg_1502;
                b_exp_2_reg_1482 <= b_exp_2_fu_469_p3;
                b_exp_2_reg_1482_pp0_iter1_reg <= b_exp_2_reg_1482;
                icmp_ln18_reg_1465 <= icmp_ln18_fu_435_p2;
                icmp_ln18_reg_1465_pp0_iter1_reg <= icmp_ln18_reg_1465;
                icmp_ln369_1_reg_1448 <= icmp_ln369_1_fu_403_p2;
                icmp_ln369_1_reg_1448_pp0_iter1_reg <= icmp_ln369_1_reg_1448;
                icmp_ln407_reg_1497 <= icmp_ln407_fu_483_p2;
                icmp_ln407_reg_1497_pp0_iter1_reg <= icmp_ln407_reg_1497;
                log_sum_reg_1508 <= pow_reduce_anonymous_namespace_log0_lut_table_array_q0;
                tmp_26_reg_1533 <= sub_ln73_1_fu_751_p2(43 downto 6);
                tmp_2_reg_1471 <= data_fu_369_p1(22 downto 22);
                trunc_ln508_reg_1476 <= trunc_ln508_fu_449_p1;
                x_is_1_reg_1453 <= x_is_1_fu_409_p2;
                x_is_1_reg_1453_pp0_iter1_reg <= x_is_1_reg_1453;
                x_is_p1_reg_1459 <= x_is_p1_fu_429_p2;
                x_is_p1_reg_1459_pp0_iter1_reg <= x_is_p1_reg_1459;
                z3_reg_1518 <= sub_ln73_1_fu_751_p2(49 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                add_ln554_1_reg_1543 <= add_ln554_1_fu_979_p2;
                add_ln554_1_reg_1543_pp0_iter3_reg <= add_ln554_1_reg_1543;
                add_ln554_1_reg_1543_pp0_iter4_reg <= add_ln554_1_reg_1543_pp0_iter3_reg;
                add_ln554_1_reg_1543_pp0_iter5_reg <= add_ln554_1_reg_1543_pp0_iter4_reg;
                and_ln407_1_reg_1502_pp0_iter2_reg <= and_ln407_1_reg_1502_pp0_iter1_reg;
                and_ln407_1_reg_1502_pp0_iter3_reg <= and_ln407_1_reg_1502_pp0_iter2_reg;
                and_ln407_1_reg_1502_pp0_iter4_reg <= and_ln407_1_reg_1502_pp0_iter3_reg;
                and_ln407_1_reg_1502_pp0_iter5_reg <= and_ln407_1_reg_1502_pp0_iter4_reg;
                icmp_ln18_reg_1465_pp0_iter2_reg <= icmp_ln18_reg_1465_pp0_iter1_reg;
                icmp_ln18_reg_1465_pp0_iter3_reg <= icmp_ln18_reg_1465_pp0_iter2_reg;
                icmp_ln18_reg_1465_pp0_iter4_reg <= icmp_ln18_reg_1465_pp0_iter3_reg;
                icmp_ln18_reg_1465_pp0_iter5_reg <= icmp_ln18_reg_1465_pp0_iter4_reg;
                icmp_ln369_1_reg_1448_pp0_iter2_reg <= icmp_ln369_1_reg_1448_pp0_iter1_reg;
                icmp_ln369_1_reg_1448_pp0_iter3_reg <= icmp_ln369_1_reg_1448_pp0_iter2_reg;
                icmp_ln369_1_reg_1448_pp0_iter4_reg <= icmp_ln369_1_reg_1448_pp0_iter3_reg;
                icmp_ln369_1_reg_1448_pp0_iter5_reg <= icmp_ln369_1_reg_1448_pp0_iter4_reg;
                icmp_ln407_reg_1497_pp0_iter2_reg <= icmp_ln407_reg_1497_pp0_iter1_reg;
                icmp_ln407_reg_1497_pp0_iter3_reg <= icmp_ln407_reg_1497_pp0_iter2_reg;
                icmp_ln407_reg_1497_pp0_iter4_reg <= icmp_ln407_reg_1497_pp0_iter3_reg;
                icmp_ln407_reg_1497_pp0_iter5_reg <= icmp_ln407_reg_1497_pp0_iter4_reg;
                m_diff_lo_reg_1574 <= m_diff_lo_fu_1105_p1;
                r_exp_reg_1568 <= r_exp_fu_1067_p3;
                tmp_5_reg_1548 <= add_ln554_1_fu_979_p2(63 downto 63);
                tmp_5_reg_1548_pp0_iter3_reg <= tmp_5_reg_1548;
                trunc_ln3_reg_1558 <= add_ln554_1_fu_979_p2(54 downto 28);
                trunc_ln3_reg_1558_pp0_iter3_reg <= trunc_ln3_reg_1558;
                trunc_ln3_reg_1558_pp0_iter4_reg <= trunc_ln3_reg_1558_pp0_iter3_reg;
                x_is_1_reg_1453_pp0_iter2_reg <= x_is_1_reg_1453_pp0_iter1_reg;
                x_is_1_reg_1453_pp0_iter3_reg <= x_is_1_reg_1453_pp0_iter2_reg;
                x_is_1_reg_1453_pp0_iter4_reg <= x_is_1_reg_1453_pp0_iter3_reg;
                x_is_1_reg_1453_pp0_iter5_reg <= x_is_1_reg_1453_pp0_iter4_reg;
                x_is_p1_reg_1459_pp0_iter2_reg <= x_is_p1_reg_1459_pp0_iter1_reg;
                x_is_p1_reg_1459_pp0_iter3_reg <= x_is_p1_reg_1459_pp0_iter2_reg;
                x_is_p1_reg_1459_pp0_iter4_reg <= x_is_p1_reg_1459_pp0_iter3_reg;
                x_is_p1_reg_1459_pp0_iter5_reg <= x_is_p1_reg_1459_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Elog2_fu_355_p1 <= ap_const_lv52_B17217F7D1C(45 - 1 downto 0);
    Z2_ind_fu_1114_p4 <= m_diff_fu_1090_p2(17 downto 13);
    a_4_fu_679_p4 <= sub_ln73_fu_654_p2(43 downto 38);
    a_5_fu_772_p4 <= sub_ln73_1_fu_751_p2(49 downto 44);
    a_fu_564_p4 <= mul_ln537_fu_550_p2(24 downto 21);
    add_ln171_1_fu_873_p2 <= std_logic_vector(unsigned(zext_ln163_fu_809_p1) + unsigned(zext_ln163_1_fu_864_p1));
    add_ln171_fu_868_p2 <= std_logic_vector(unsigned(log_sum_reg_1508) + unsigned(logn_cast_fu_801_p1));
    add_ln189_fu_1191_p2 <= std_logic_vector(unsigned(zext_ln189_fu_1184_p1) + unsigned(zext_ln189_1_fu_1187_p1));
    add_ln554_1_fu_979_p2 <= std_logic_vector(signed(sext_ln554_1_fu_975_p1) + signed(shl_ln3_fu_957_p3));
    add_ln554_fu_969_p2 <= std_logic_vector(unsigned(log_sum_1_fu_883_p2) + unsigned(sext_ln554_fu_965_p1));
    add_ln592_1_fu_1053_p2 <= std_logic_vector(unsigned(trunc_ln_fu_1028_p4) + unsigned(ap_const_lv10_1));
    add_ln645_1_fu_1265_p2 <= std_logic_vector(unsigned(shl_ln6_fu_1237_p3) + unsigned(zext_ln645_2_fu_1245_p1));
    add_ln645_2_fu_1271_p2 <= std_logic_vector(unsigned(trunc_ln645_1_fu_1253_p3) + unsigned(zext_ln645_3_fu_1261_p1));
    add_ln645_fu_1217_p2 <= std_logic_vector(unsigned(pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_q0) + unsigned(ap_const_lv27_4));
    add_ln73_1_fu_723_p2 <= std_logic_vector(unsigned(zext_ln73_6_fu_719_p1) + unsigned(zext_ln73_5_fu_715_p1));
    add_ln73_2_fu_840_p2 <= std_logic_vector(unsigned(zext_ln73_11_fu_832_p1) + unsigned(zext_ln73_12_fu_836_p1));
    add_ln73_fu_630_p2 <= std_logic_vector(unsigned(eZ_fu_610_p3) + unsigned(zext_ln73_fu_626_p1));
    and_ln407_1_fu_513_p2 <= (icmp_ln407_1_fu_495_p2 and and_ln407_fu_507_p2);
    and_ln407_fu_507_p2 <= (xor_ln369_fu_489_p2 and icmp_ln407_2_fu_501_p2);
    and_ln657_fu_1399_p2 <= (icmp_ln657_fu_1307_p2 and and_ln407_1_reg_1502_pp0_iter5_reg);
    and_ln674_1_fu_1424_p2 <= (and_ln674_fu_1418_p2 and and_ln407_1_reg_1502_pp0_iter5_reg);
    and_ln674_fu_1418_p2 <= (xor_ln657_fu_1412_p2 and icmp_ln674_fu_1328_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to5_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to5)
    begin
        if (((ap_idle_pp0_0to5 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv32_0 when (and_ln674_1_fu_1424_p2(0) = '1') else 
        select_ln657_fu_1404_p3;
    b_exp_1_fu_463_p2 <= std_logic_vector(unsigned(zext_ln346_fu_387_p1) + unsigned(ap_const_lv9_182));
    b_exp_2_fu_469_p3 <= 
        b_exp_1_fu_463_p2 when (tmp_2_fu_441_p3(0) = '1') else 
        b_exp_fu_391_p2;
    b_exp_fu_391_p2 <= std_logic_vector(unsigned(zext_ln346_fu_387_p1) + unsigned(ap_const_lv9_181));
    b_frac_1_fu_528_p3 <= (ap_const_lv1_1 & trunc_ln508_reg_1476);
    b_frac_fu_519_p4 <= ((ap_const_lv1_1 & trunc_ln508_reg_1476) & ap_const_lv1_0);
    bitcast_ln356_fu_1382_p1 <= t_fu_1372_p4;
    bs_exp_fu_373_p4 <= data_fu_369_p1(30 downto 23);
    bs_sig_fu_383_p1 <= data_fu_369_p1(23 - 1 downto 0);
    data_fu_369_p1 <= base_r;
    eZ_1_fu_689_p3 <= (ap_const_lv5_10 & zext_ln73_4_fu_670_p1);
    eZ_2_fu_817_p3 <= (ap_const_lv7_40 & zext_ln73_10_fu_805_p1);
    eZ_fu_610_p3 <= 
        tmp_s_fu_596_p4 when (tmp_3_fu_578_p3(0) = '1') else 
        zext_ln71_fu_606_p1;
    exp_Z1P_m_1_fu_1197_p4 <= add_ln189_fu_1191_p2(18 downto 1);
    exp_Z1_hi_fu_1207_p4 <= pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_q0(26 downto 9);

    grp_fu_1437_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1437_ce <= ap_const_logic_1;
        else 
            grp_fu_1437_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1437_p1 <= ap_const_lv25_B8A(12 - 1 downto 0);
    icmp_ln18_fu_435_p2 <= "1" when (bs_exp_fu_373_p4 = ap_const_lv8_FF) else "0";
    icmp_ln369_1_fu_403_p2 <= "1" when (bs_sig_fu_383_p1 = ap_const_lv23_0) else "0";
    icmp_ln369_fu_397_p2 <= "1" when (b_exp_fu_391_p2 = ap_const_lv9_0) else "0";
    icmp_ln407_1_fu_495_p2 <= "0" when (bs_exp_fu_373_p4 = ap_const_lv8_FF) else "1";
    icmp_ln407_2_fu_501_p2 <= "0" when (bs_exp_fu_373_p4 = ap_const_lv8_0) else "1";
    icmp_ln407_fu_483_p2 <= "1" when (bs_exp_fu_373_p4 = ap_const_lv8_0) else "0";
    icmp_ln592_fu_1047_p2 <= "1" when (trunc_ln592_fu_1044_p1 = ap_const_lv15_0) else "0";
    icmp_ln657_fu_1307_p2 <= "1" when (signed(tmp_8_fu_1297_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln674_fu_1328_p2 <= "1" when (signed(r_exp_2_fu_1290_p3) < signed(ap_const_lv10_382)) else "0";
    index0_fu_453_p4 <= data_fu_369_p1(22 downto 17);
    log_sum_1_fu_883_p2 <= std_logic_vector(unsigned(zext_ln171_fu_879_p1) + unsigned(add_ln171_fu_868_p2));
    logn_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_q0),56));
    lshr_ln_fu_915_p4 <= mul_ln551_fu_365_p2(45 downto 1);
    m_diff_fu_1090_p2 <= std_logic_vector(unsigned(trunc_ln3_reg_1558_pp0_iter4_reg) - unsigned(trunc_ln603_1_fu_1080_p4));
    m_diff_hi_fu_1095_p4 <= m_diff_fu_1090_p2(26 downto 18);
    m_diff_lo_fu_1105_p1 <= m_diff_fu_1090_p2(18 - 1 downto 0);
    m_fix_hi_fu_985_p4 <= add_ln554_1_fu_979_p2(63 downto 51);
    mul_ln537_fu_550_p0 <= 
        zext_ln514_fu_535_p1 when (tmp_2_reg_1471(0) = '1') else 
        b_frac_fu_519_p4;
    mul_ln537_fu_550_p1 <= mul_ln537_fu_550_p10(6 - 1 downto 0);
    mul_ln537_fu_550_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_q0),25));
    mul_ln551_fu_365_p0 <= zext_ln551_fu_909_p1(23 - 1 downto 0);
    mul_ln551_fu_365_p1 <= zext_ln551_fu_909_p1(23 - 1 downto 0);
    mul_ln645_fu_1231_p0 <= mul_ln645_fu_1231_p00(18 - 1 downto 0);
    mul_ln645_fu_1231_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1_hi_fu_1207_p4),36));
    mul_ln645_fu_1231_p1 <= mul_ln645_fu_1231_p10(18 - 1 downto 0);
    mul_ln645_fu_1231_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1P_m_1_fu_1197_p4),36));
    mul_ln73_1_fu_347_p0 <= mul_ln73_1_fu_347_p00(6 - 1 downto 0);
    mul_ln73_1_fu_347_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_4_fu_679_p4),47));
    mul_ln73_1_fu_347_p1 <= mul_ln73_1_fu_347_p10(41 - 1 downto 0);
    mul_ln73_1_fu_347_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_fu_660_p4),47));
    mul_ln73_2_fu_351_p0 <= mul_ln73_2_fu_351_p00(6 - 1 downto 0);
    mul_ln73_2_fu_351_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_5_reg_1528),50));
    mul_ln73_2_fu_351_p1 <= zext_ln73_10_fu_805_p1(44 - 1 downto 0);
    mul_ln73_fu_644_p0 <= mul_ln73_fu_644_p00(39 - 1 downto 0);
    mul_ln73_fu_644_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z1_fu_556_p3),43));
    mul_ln73_fu_644_p1 <= mul_ln73_fu_644_p10(4 - 1 downto 0);
    mul_ln73_fu_644_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_564_p4),43));
    or_ln407_1_fu_1151_p2 <= (x_is_NaN_fu_1134_p2 or x_is_1_reg_1453_pp0_iter5_reg);
    or_ln407_2_fu_1164_p2 <= (x_is_1_reg_1453_pp0_iter5_reg or icmp_ln18_reg_1465_pp0_iter5_reg);
    or_ln407_3_fu_1386_p2 <= (or_ln407_2_fu_1164_p2 or icmp_ln407_reg_1497_pp0_iter5_reg);
    or_ln407_fu_1139_p2 <= (x_is_p1_reg_1459_pp0_iter5_reg or x_is_NaN_fu_1134_p2);
    out_exp_fu_1366_p2 <= std_logic_vector(unsigned(trunc_ln686_fu_1362_p1) + unsigned(ap_const_lv8_7F));
    out_sig_fu_1354_p3 <= 
        tmp_fu_1334_p4 when (tmp_7_fu_1277_p3(0) = '1') else 
        tmp_4_fu_1344_p4;
    pow_reduce_anonymous_namespace_log0_lut_table_array_address0 <= zext_ln531_fu_477_p1(6 - 1 downto 0);

    pow_reduce_anonymous_namespace_log0_lut_table_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pow_reduce_anonymous_namespace_log0_lut_table_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_log0_lut_table_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_address0 <= zext_ln531_fu_477_p1(6 - 1 downto 0);

    pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_log_inverse_lut_table_pow_0_5_64_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_address0 <= zext_ln75_2_fu_792_p1(6 - 1 downto 0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_address0 <= zext_ln75_fu_674_p1(4 - 1 downto 0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4_16_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_address0 <= zext_ln75_1_fu_767_p1(6 - 1 downto 0);

    pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_address0 <= zext_ln640_fu_1109_p1(9 - 1 downto 0);

    pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_table_exp_Z1_ap_ufixed_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_address0 <= zext_ln188_fu_1124_p1(5 - 1 downto 0);

    pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_ce0 <= ap_const_logic_1;
        else 
            pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_exp_1_fu_1285_p2 <= std_logic_vector(signed(r_exp_reg_1568) + signed(ap_const_lv10_3FF));
    r_exp_2_fu_1290_p3 <= 
        r_exp_reg_1568 when (tmp_7_fu_1277_p3(0) = '1') else 
        r_exp_1_fu_1285_p2;
    r_exp_fu_1067_p3 <= 
        select_ln592_fu_1059_p3 when (tmp_6_fu_1037_p3(0) = '1') else 
        trunc_ln_fu_1028_p4;
    select_ln407_1_fu_1156_p3 <= 
        select_ln407_fu_1144_p3 when (or_ln407_fu_1139_p2(0) = '1') else 
        ap_const_lv32_3F800000;
    select_ln407_2_fu_1168_p3 <= 
        select_ln407_1_fu_1156_p3 when (or_ln407_1_fu_1151_p2(0) = '1') else 
        ap_const_lv32_7F800000;
    select_ln407_3_fu_1176_p3 <= 
        select_ln407_2_fu_1168_p3 when (or_ln407_2_fu_1164_p2(0) = '1') else 
        ap_const_lv32_0;
    select_ln407_4_fu_1391_p3 <= 
        select_ln407_3_fu_1176_p3 when (or_ln407_3_fu_1386_p2(0) = '1') else 
        bitcast_ln356_fu_1382_p1;
    select_ln407_fu_1144_p3 <= 
        ap_const_lv32_3F800000 when (x_is_p1_reg_1459_pp0_iter5_reg(0) = '1') else 
        ap_const_lv32_7FFFFFFF;
    select_ln592_fu_1059_p3 <= 
        trunc_ln_fu_1028_p4 when (icmp_ln592_fu_1047_p2(0) = '1') else 
        add_ln592_1_fu_1053_p2;
    select_ln657_fu_1404_p3 <= 
        select_ln658_fu_1320_p3 when (and_ln657_fu_1399_p2(0) = '1') else 
        select_ln407_4_fu_1391_p3;
    select_ln658_fu_1320_p3 <= 
        ap_const_lv32_0 when (tmp_9_fu_1313_p3(0) = '1') else 
        ap_const_lv32_7F800000;
        sext_ln554_1_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln554_fu_969_p2),64));

        sext_ln554_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln551_1_fu_947_p4),56));

    shl_ln2_fu_925_p3 <= (tmp_27_fu_889_p4 & ap_const_lv24_0);
    shl_ln3_fu_957_p3 <= (Elog2_fu_355_p2 & ap_const_lv12_0);
    shl_ln5_fu_1017_p3 <= (tmp_5_reg_1548_pp0_iter3_reg & ap_const_lv15_4000);
    shl_ln6_fu_1237_p3 <= (add_ln645_fu_1217_p2 & ap_const_lv17_0);
    shl_ln73_1_fu_846_p3 <= (mul_ln73_2_fu_351_p2 & ap_const_lv6_0);
    shl_ln73_2_fu_618_p3 <= (trunc_ln68_fu_574_p1 & ap_const_lv22_0);
    shl_ln73_3_fu_707_p3 <= (tmp_25_fu_697_p4 & ap_const_lv14_0);
    shl_ln73_4_fu_825_p3 <= (tmp_26_reg_1533 & ap_const_lv24_0);
    shl_ln_fu_739_p3 <= (mul_ln73_1_fu_347_p2 & ap_const_lv1_0);
    sub_ln551_fu_941_p2 <= std_logic_vector(unsigned(zext_ln551_1_fu_933_p1) - unsigned(zext_ln551_2_fu_937_p1));
    sub_ln73_1_fu_751_p2 <= std_logic_vector(unsigned(add_ln73_1_fu_723_p2) - unsigned(zext_ln73_9_fu_747_p1));
    sub_ln73_2_fu_858_p2 <= std_logic_vector(unsigned(add_ln73_2_fu_840_p2) - unsigned(zext_ln73_13_fu_854_p1));
    sub_ln73_fu_654_p2 <= std_logic_vector(unsigned(add_ln73_fu_630_p2) - unsigned(zext_ln73_3_fu_650_p1));
    t_fu_1372_p4 <= ((ap_const_lv1_0 & out_exp_fu_1366_p2) & out_sig_fu_1354_p3);
    tmp_1_fu_415_p3 <= data_fu_369_p1(31 downto 31);
    tmp_25_fu_697_p4 <= sub_ln73_fu_654_p2(37 downto 3);
    tmp_27_fu_889_p4 <= sub_ln73_2_fu_858_p2(62 downto 24);
    tmp_28_fu_899_p4 <= sub_ln73_2_fu_858_p2(62 downto 40);
    tmp_2_fu_441_p3 <= data_fu_369_p1(22 downto 22);
    tmp_3_fu_578_p3 <= mul_ln537_fu_550_p2(24 downto 24);
    tmp_4_fu_1344_p4 <= add_ln645_2_fu_1271_p2(41 downto 19);
    tmp_6_fu_1037_p3 <= grp_fu_1437_p3(24 downto 24);
    tmp_7_fu_1277_p3 <= add_ln645_1_fu_1265_p2(43 downto 43);
    tmp_8_fu_1297_p4 <= r_exp_2_fu_1290_p3(9 downto 7);
    tmp_9_fu_1313_p3 <= add_ln554_1_reg_1543_pp0_iter5_reg(63 downto 63);
    tmp_fu_1334_p4 <= add_ln645_1_fu_1265_p2(42 downto 20);
    tmp_s_fu_596_p4 <= ((ap_const_lv5_10 & mul_ln537_fu_550_p2) & ap_const_lv14_0);
    trunc_ln508_fu_449_p1 <= data_fu_369_p1(23 - 1 downto 0);
    trunc_ln551_1_fu_947_p4 <= sub_ln551_fu_941_p2(63 downto 24);
    trunc_ln592_fu_1044_p1 <= grp_fu_1437_p3(15 - 1 downto 0);
    trunc_ln603_1_fu_1080_p4 <= mul_ln597_fu_360_p2(35 downto 9);
    trunc_ln645_1_fu_1253_p3 <= (trunc_ln645_fu_1249_p1 & ap_const_lv17_0);
    trunc_ln645_fu_1249_p1 <= add_ln645_fu_1217_p2(25 - 1 downto 0);
    trunc_ln686_fu_1362_p1 <= r_exp_2_fu_1290_p3(8 - 1 downto 0);
    trunc_ln68_fu_574_p1 <= mul_ln537_fu_550_p2(21 - 1 downto 0);
    trunc_ln_fu_1028_p4 <= grp_fu_1437_p3(24 downto 15);
    x_is_1_fu_409_p2 <= (icmp_ln369_fu_397_p2 and icmp_ln369_1_fu_403_p2);
    x_is_NaN_fu_1134_p2 <= (xor_ln18_fu_1129_p2 and icmp_ln18_reg_1465_pp0_iter5_reg);
    x_is_p1_fu_429_p2 <= (xor_ln370_fu_423_p2 and x_is_1_fu_409_p2);
    xor_ln18_fu_1129_p2 <= (icmp_ln369_1_reg_1448_pp0_iter5_reg xor ap_const_lv1_1);
    xor_ln369_fu_489_p2 <= (x_is_1_fu_409_p2 xor ap_const_lv1_1);
    xor_ln370_fu_423_p2 <= (tmp_1_fu_415_p3 xor ap_const_lv1_1);
    xor_ln657_fu_1412_p2 <= (icmp_ln657_fu_1307_p2 xor ap_const_lv1_1);
    z1_fu_556_p3 <= (mul_ln537_fu_550_p2 & ap_const_lv14_0);
    z2_fu_660_p4 <= sub_ln73_fu_654_p2(43 downto 3);
    zext_ln163_1_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_12_6_64_array_q0),50));
    zext_ln163_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_7_6_64_array_q0),50));
    zext_ln171_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln171_1_fu_873_p2),56));
    zext_ln188_fu_1124_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Z2_ind_fu_1114_p4),64));
    zext_ln189_1_fu_1187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(pow_reduce_anonymous_namespace_table_f_Z2_ap_ufixed_array_q0),19));
    zext_ln189_fu_1184_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_diff_lo_reg_1574),19));
    zext_ln346_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bs_exp_fu_373_p4),9));
    zext_ln514_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(b_frac_1_fu_528_p3),25));
    zext_ln531_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index0_fu_453_p4),64));
    zext_ln551_1_fu_933_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_925_p3),64));
    zext_ln551_2_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_915_p4),64));
    zext_ln551_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_899_p4),46));
    zext_ln640_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_diff_hi_fu_1095_p4),64));
    zext_ln645_2_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln645_fu_1231_p2),44));
    zext_ln645_3_fu_1261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln645_fu_1231_p2),42));
    zext_ln71_cast_fu_586_p4 <= ((ap_const_lv5_10 & mul_ln537_fu_550_p2) & ap_const_lv13_0);
    zext_ln71_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln71_cast_fu_586_p4),44));
    zext_ln73_10_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z3_reg_1518),50));
    zext_ln73_11_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_4_fu_825_p3),63));
    zext_ln73_12_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_2_fu_817_p3),63));
    zext_ln73_13_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_1_fu_846_p3),63));
    zext_ln73_3_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln73_fu_644_p2),44));
    zext_ln73_4_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(z2_fu_660_p4),44));
    zext_ln73_5_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_3_fu_707_p3),50));
    zext_ln73_6_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(eZ_1_fu_689_p3),50));
    zext_ln73_9_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_739_p3),50));
    zext_ln73_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln73_2_fu_618_p3),44));
    zext_ln75_1_fu_767_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_4_fu_679_p4),64));
    zext_ln75_2_fu_792_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_5_fu_772_p4),64));
    zext_ln75_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(a_fu_564_p4),64));
end behav;
