-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log0_lut_table_array_ROM_Acud is 
    generic(
             DataWidth     : integer := 56; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log0_lut_table_array_ROM_Acud is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11111111011111000001111011111101010110010011111011101000", 1 => "11111111011111000001111011111101010110010011111011101000", 2 => "11111111011111000001111011111101010110010011111011101000", 3 => "00000111100111001100110111000010010011001110000100001001", 
    4 => "00000111100111001100110111000010010011001110000100001001", 5 => "00010000000000011011011110110010111101110111100011101101", 6 => "00010000000000011011011110110010111101110111100011101101", 7 => "00011000101011110111110101011010101100101000100001101111", 
    8 => "00011000101011110111110101011010101100101000100001101111", 9 => "00011000101011110111110101011010101100101000100001101111", 10 => "00100001101010110011110000000001101010010000011111011111", 11 => "00100001101010110011110000000001101010010000011111011111", 
    12 => "00101010111110101001111111010100000000011011101001001011", 13 => "00101010111110101001111111010100000000011011101001001011", 14 => "00101010111110101001111111010100000000011011101001001011", 15 => "00110100101000111111100101110110011011101111001010101110", 
    16 => "00110100101000111111100101110110011011101111001010101110", 17 => "00110100101000111111100101110110011011101111001010101110", 18 => "00111110101011100101011111010110110000001010010111011010", 19 => "00111110101011100101011111010110110000001010010111011010", 
    20 => "00111110101011100101011111010110110000001010010111011010", 21 => "00111110101011100101011111010110110000001010010111011010", 22 => "01001001001000011010011101000010001011001010110100110001", 23 => "01001001001000011010011101000010001011001010110100110001", 
    24 => "01001001001000011010011101000010001011001010110100110001", 25 => "01001001001000011010011101000010001011001010110100110001", 26 => "01010100000001101101011100011010001110111100111001000110", 27 => "01010100000001101101011100011010001110111100111001000110", 
    28 => "01010100000001101101011100011010001110111100111001000110", 29 => "01010100000001101101011100011010001110111100111001000110", 30 => "01011111011010000000011111101100101110011001001101010111", 31 => "01011111011010000000011111101100101110011001001101010111", 
    32 => "10110011110110001001010000010001110101001100101000100101", 33 => "10110011110110001001010000010001110101001100101000100101", 34 => "10111001110111101010110001001110101010101010011010110000", 35 => "10111001110111101010110001001110101010101010011010110000", 
    36 => "11000000000010011110111000100010100111001100001010010011", 37 => "11000000000010011110111000100010100111001100001010010011", 38 => "11000000000010011110111000100010100111001100001010010011", 39 => "11000110010111000010111101101110001001000000101010100100", 
    40 => "11000110010111000010111101101110001001000000101010100100", 41 => "11000110010111000010111101101110001001000000101010100100", 42 => "11001100110101110110100111000011011100001001000101111111", 43 => "11001100110101110110100111000011011100001001000101111111", 
    44 => "11010011011111011011111000011100000010100001011101000000", 45 => "11010011011111011011111000011100000010100001011101000000", 46 => "11010011011111011011111000011100000010100001011101000000", 47 => "11011010010100010111100100001101000110010101010010100001", 
    48 => "11011010010100010111100100001101000110010101010010100001", 49 => "11011010010100010111100100001101000110010101010010100001", 50 => "11100001010101010001011110001111001011100100110000000010", 51 => "11100001010101010001011110001111001011100100110000000010", 
    52 => "11100001010101010001011110001111001011100100110000000010", 53 => "11100001010101010001011110001111001011100100110000000010", 54 => "11101000100010110100110001110010011100111101001110011100", 55 => "11101000100010110100110001110010011100111101001110011100", 
    56 => "11101000100010110100110001110010011100111101001110011100", 57 => "11101111111101110000011010011101010100001000110110010101", 58 => "11101111111101110000011010011101010100001000110110010101", 59 => "11101111111101110000011010011101010100001000110110010101", 
    60 => "11101111111101110000011010011101010100001000110110010101", 61 => "11110111100110110111100000111001101110110011001000101000", 62 => "11110111100110110111100000111001101110110011001000101000", 63 => "11110111100110110111100000111001101110110011001000101000");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

