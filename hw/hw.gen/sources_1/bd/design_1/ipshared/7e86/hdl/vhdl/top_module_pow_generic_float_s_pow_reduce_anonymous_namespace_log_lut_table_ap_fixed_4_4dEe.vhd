-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4dEe is 
    generic(
             DataWidth     : integer := 52; 
             AddressWidth     : integer := 4; 
             AddressRange    : integer := 16
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of top_module_pow_generic_float_s_pow_reduce_anonymous_namespace_log_lut_table_ap_fixed_4_4dEe is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "0000000000000000000000000000000000000000000000000000", 1 => "0001000000000000000000010101010101010101100010001000", 2 => "0010000000010000000100101011111011000011001011111000", 3 => "0011000000110000010101001001110100111011001010100001", 
    4 => "0100000001100000111001111011001111111001100000100100", 5 => "0101000010100001111011010010101000010011011111001101", 6 => "0110000011110011100001101000110000001110111100111001", 7 => "0111000101010101110101011100110110000001110101010011", 
    8 => "0111100110001101010011000101101010111101011011111111", 9 => "1000101000001000111011001111100110100100111001100101", 10 => "1001101010010101100110100010011011010011100001100010", 11 => "1010101100110011011101110100101111011001111000111000", 
    12 => "1011101111100010101010000100000100010000100111101111", 13 => "1100110010100011010100010100111101101000010111100101", 14 => "1101110101110101100101110011001001000011010011000001", 15 => "1110111001011001100111110001100101011000010110101001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

