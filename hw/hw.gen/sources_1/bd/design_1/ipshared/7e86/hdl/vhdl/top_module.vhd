-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    input_stream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
    input_stream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
    input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_stream_TVALID : IN STD_LOGIC;
    input_stream_TREADY : OUT STD_LOGIC;
    output_stream_TVALID : OUT STD_LOGIC;
    output_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of top_module is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "top_module_top_module,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=14.142652,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=136,HLS_SYN_DSP=0,HLS_SYN_FF=13409,HLS_SYN_LUT=22963,HLS_VERSION=2023_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal u_perm : STD_LOGIC_VECTOR (31 downto 0);
    signal u_diff : STD_LOGIC_VECTOR (31 downto 0);
    signal u_dt : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_u_perm_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_u_perm_c_write : STD_LOGIC;
    signal entry_proc_U0_u_diff_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_u_diff_c_write : STD_LOGIC;
    signal entry_proc_U0_u_dt_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal entry_proc_U0_u_dt_c_write : STD_LOGIC;
    signal get_image_stream_U0_ap_start : STD_LOGIC;
    signal get_image_stream_U0_ap_done : STD_LOGIC;
    signal get_image_stream_U0_ap_continue : STD_LOGIC;
    signal get_image_stream_U0_ap_idle : STD_LOGIC;
    signal get_image_stream_U0_ap_ready : STD_LOGIC;
    signal get_image_stream_U0_start_out : STD_LOGIC;
    signal get_image_stream_U0_start_write : STD_LOGIC;
    signal get_image_stream_U0_input_stream_TREADY : STD_LOGIC;
    signal get_image_stream_U0_msg_strm_din : STD_LOGIC_VECTOR (63 downto 0);
    signal get_image_stream_U0_msg_strm_write : STD_LOGIC;
    signal get_image_stream_U0_len_strm_din : STD_LOGIC_VECTOR (63 downto 0);
    signal get_image_stream_U0_len_strm_write : STD_LOGIC;
    signal get_image_stream_U0_end_len_strm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal get_image_stream_U0_end_len_strm_write : STD_LOGIC;
    signal sha256_64_U0_ap_start : STD_LOGIC;
    signal sha256_64_U0_ap_done : STD_LOGIC;
    signal sha256_64_U0_ap_continue : STD_LOGIC;
    signal sha256_64_U0_ap_idle : STD_LOGIC;
    signal sha256_64_U0_ap_ready : STD_LOGIC;
    signal sha256_64_U0_start_out : STD_LOGIC;
    signal sha256_64_U0_start_write : STD_LOGIC;
    signal sha256_64_U0_msg_strm_read : STD_LOGIC;
    signal sha256_64_U0_len_strm_read : STD_LOGIC;
    signal sha256_64_U0_end_len_strm_read : STD_LOGIC;
    signal sha256_64_U0_hash_strm_din : STD_LOGIC_VECTOR (255 downto 0);
    signal sha256_64_U0_hash_strm_write : STD_LOGIC;
    signal sha256_64_U0_end_hash_strm_din : STD_LOGIC_VECTOR (0 downto 0);
    signal sha256_64_U0_end_hash_strm_write : STD_LOGIC;
    signal set_hash_stream_U0_ap_start : STD_LOGIC;
    signal set_hash_stream_U0_ap_done : STD_LOGIC;
    signal set_hash_stream_U0_ap_continue : STD_LOGIC;
    signal set_hash_stream_U0_ap_idle : STD_LOGIC;
    signal set_hash_stream_U0_ap_ready : STD_LOGIC;
    signal set_hash_stream_U0_hash_strm_read : STD_LOGIC;
    signal set_hash_stream_U0_end_hash_strm_read : STD_LOGIC;
    signal set_hash_stream_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal set_hash_stream_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_m_diff_channel : STD_LOGIC;
    signal m_diff_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_m_diff_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_m_diff_channel : STD_LOGIC;
    signal ap_channel_done_m_perm_channel : STD_LOGIC;
    signal m_perm_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_m_perm_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_m_perm_channel : STD_LOGIC;
    signal logmap_U0_ap_start : STD_LOGIC;
    signal logmap_U0_ap_done : STD_LOGIC;
    signal logmap_U0_ap_continue : STD_LOGIC;
    signal logmap_U0_ap_idle : STD_LOGIC;
    signal logmap_U0_ap_ready : STD_LOGIC;
    signal logmap_U0_output_stream_TDATA : STD_LOGIC_VECTOR (63 downto 0);
    signal logmap_U0_output_stream_TVALID : STD_LOGIC;
    signal logmap_U0_output_stream_TKEEP : STD_LOGIC_VECTOR (7 downto 0);
    signal logmap_U0_output_stream_TSTRB : STD_LOGIC_VECTOR (7 downto 0);
    signal logmap_U0_output_stream_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal logmap_U0_output_stream_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal logmap_U0_output_stream_TID : STD_LOGIC_VECTOR (0 downto 0);
    signal logmap_U0_output_stream_TDEST : STD_LOGIC_VECTOR (0 downto 0);
    signal logmap_U0_u_perm_read : STD_LOGIC;
    signal logmap_U0_u_diff_read : STD_LOGIC;
    signal logmap_U0_u_dt_read : STD_LOGIC;
    signal u_perm_c_full_n : STD_LOGIC;
    signal u_perm_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal u_perm_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal u_perm_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal u_perm_c_empty_n : STD_LOGIC;
    signal u_diff_c_full_n : STD_LOGIC;
    signal u_diff_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal u_diff_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal u_diff_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal u_diff_c_empty_n : STD_LOGIC;
    signal u_dt_c_full_n : STD_LOGIC;
    signal u_dt_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal u_dt_c_num_data_valid : STD_LOGIC_VECTOR (3 downto 0);
    signal u_dt_c_fifo_cap : STD_LOGIC_VECTOR (3 downto 0);
    signal u_dt_c_empty_n : STD_LOGIC;
    signal msg_strm_full_n : STD_LOGIC;
    signal msg_strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal msg_strm_num_data_valid : STD_LOGIC_VECTOR (15 downto 0);
    signal msg_strm_fifo_cap : STD_LOGIC_VECTOR (15 downto 0);
    signal msg_strm_empty_n : STD_LOGIC;
    signal len_strm_full_n : STD_LOGIC;
    signal len_strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal len_strm_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal len_strm_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal len_strm_empty_n : STD_LOGIC;
    signal end_len_strm_full_n : STD_LOGIC;
    signal end_len_strm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_len_strm_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal end_len_strm_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal end_len_strm_empty_n : STD_LOGIC;
    signal hash_strm_full_n : STD_LOGIC;
    signal hash_strm_dout : STD_LOGIC_VECTOR (255 downto 0);
    signal hash_strm_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_strm_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal hash_strm_empty_n : STD_LOGIC;
    signal end_hash_strm_full_n : STD_LOGIC;
    signal end_hash_strm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_hash_strm_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal end_hash_strm_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal end_hash_strm_empty_n : STD_LOGIC;
    signal m_perm_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal m_perm_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal m_perm_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal m_perm_channel_empty_n : STD_LOGIC;
    signal m_diff_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal m_diff_channel_num_data_valid : STD_LOGIC_VECTOR (1 downto 0);
    signal m_diff_channel_fifo_cap : STD_LOGIC_VECTOR (1 downto 0);
    signal m_diff_channel_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_get_image_stream_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_get_image_stream_U0_ap_ready : STD_LOGIC;
    signal start_for_sha256_64_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sha256_64_U0_full_n : STD_LOGIC;
    signal start_for_sha256_64_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sha256_64_U0_empty_n : STD_LOGIC;
    signal start_for_set_hash_stream_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_set_hash_stream_U0_full_n : STD_LOGIC;
    signal start_for_set_hash_stream_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_set_hash_stream_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        u_perm : IN STD_LOGIC_VECTOR (31 downto 0);
        u_perm_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_perm_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_perm_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_perm_c_full_n : IN STD_LOGIC;
        u_perm_c_write : OUT STD_LOGIC;
        u_diff : IN STD_LOGIC_VECTOR (31 downto 0);
        u_diff_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_diff_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_diff_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_diff_c_full_n : IN STD_LOGIC;
        u_diff_c_write : OUT STD_LOGIC;
        u_dt : IN STD_LOGIC_VECTOR (31 downto 0);
        u_dt_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_dt_c_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_dt_c_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_dt_c_full_n : IN STD_LOGIC;
        u_dt_c_write : OUT STD_LOGIC );
    end component;


    component top_module_get_image_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_stream_TDATA : IN STD_LOGIC_VECTOR (63 downto 0);
        input_stream_TVALID : IN STD_LOGIC;
        input_stream_TREADY : OUT STD_LOGIC;
        input_stream_TKEEP : IN STD_LOGIC_VECTOR (7 downto 0);
        input_stream_TSTRB : IN STD_LOGIC_VECTOR (7 downto 0);
        input_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TID : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_TDEST : IN STD_LOGIC_VECTOR (0 downto 0);
        msg_strm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        msg_strm_num_data_valid : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm_fifo_cap : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm_full_n : IN STD_LOGIC;
        msg_strm_write : OUT STD_LOGIC;
        len_strm_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        len_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm_full_n : IN STD_LOGIC;
        len_strm_write : OUT STD_LOGIC;
        end_len_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_len_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm_full_n : IN STD_LOGIC;
        end_len_strm_write : OUT STD_LOGIC );
    end component;


    component top_module_sha256_64_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        msg_strm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        msg_strm_num_data_valid : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm_fifo_cap : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm_empty_n : IN STD_LOGIC;
        msg_strm_read : OUT STD_LOGIC;
        len_strm_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        len_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm_empty_n : IN STD_LOGIC;
        len_strm_read : OUT STD_LOGIC;
        end_len_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_len_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm_empty_n : IN STD_LOGIC;
        end_len_strm_read : OUT STD_LOGIC;
        hash_strm_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm_full_n : IN STD_LOGIC;
        hash_strm_write : OUT STD_LOGIC;
        end_hash_strm_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm_full_n : IN STD_LOGIC;
        end_hash_strm_write : OUT STD_LOGIC );
    end component;


    component top_module_set_hash_stream IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        hash_strm_dout : IN STD_LOGIC_VECTOR (255 downto 0);
        hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm_empty_n : IN STD_LOGIC;
        hash_strm_read : OUT STD_LOGIC;
        end_hash_strm_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_hash_strm_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm_empty_n : IN STD_LOGIC;
        end_hash_strm_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_logmap IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_stream_TDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_stream_TVALID : OUT STD_LOGIC;
        output_stream_TREADY : IN STD_LOGIC;
        output_stream_TKEEP : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_stream_TSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_stream_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
        output_stream_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0);
        u_perm_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        u_perm_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_perm_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_perm_empty_n : IN STD_LOGIC;
        u_perm_read : OUT STD_LOGIC;
        u_diff_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        u_diff_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_diff_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_diff_empty_n : IN STD_LOGIC;
        u_diff_read : OUT STD_LOGIC;
        u_dt_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        u_dt_num_data_valid : IN STD_LOGIC_VECTOR (3 downto 0);
        u_dt_fifo_cap : IN STD_LOGIC_VECTOR (3 downto 0);
        u_dt_empty_n : IN STD_LOGIC;
        u_dt_read : OUT STD_LOGIC );
    end component;


    component top_module_fifo_w32_d5_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (3 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w64_d32768_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w64_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w1_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w256_d1_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (255 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (255 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w1_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (1 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_start_for_sha256_64_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_start_for_set_hash_stream_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        u_perm : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_diff : OUT STD_LOGIC_VECTOR (31 downto 0);
        u_dt : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    control_s_axi_U : component top_module_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        u_perm => u_perm,
        u_diff => u_diff,
        u_dt => u_dt,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    entry_proc_U0 : component top_module_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        u_perm => u_perm,
        u_perm_c_din => entry_proc_U0_u_perm_c_din,
        u_perm_c_num_data_valid => u_perm_c_num_data_valid,
        u_perm_c_fifo_cap => u_perm_c_fifo_cap,
        u_perm_c_full_n => u_perm_c_full_n,
        u_perm_c_write => entry_proc_U0_u_perm_c_write,
        u_diff => u_diff,
        u_diff_c_din => entry_proc_U0_u_diff_c_din,
        u_diff_c_num_data_valid => u_diff_c_num_data_valid,
        u_diff_c_fifo_cap => u_diff_c_fifo_cap,
        u_diff_c_full_n => u_diff_c_full_n,
        u_diff_c_write => entry_proc_U0_u_diff_c_write,
        u_dt => u_dt,
        u_dt_c_din => entry_proc_U0_u_dt_c_din,
        u_dt_c_num_data_valid => u_dt_c_num_data_valid,
        u_dt_c_fifo_cap => u_dt_c_fifo_cap,
        u_dt_c_full_n => u_dt_c_full_n,
        u_dt_c_write => entry_proc_U0_u_dt_c_write);

    get_image_stream_U0 : component top_module_get_image_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => get_image_stream_U0_ap_start,
        start_full_n => start_for_sha256_64_U0_full_n,
        ap_done => get_image_stream_U0_ap_done,
        ap_continue => get_image_stream_U0_ap_continue,
        ap_idle => get_image_stream_U0_ap_idle,
        ap_ready => get_image_stream_U0_ap_ready,
        start_out => get_image_stream_U0_start_out,
        start_write => get_image_stream_U0_start_write,
        input_stream_TDATA => input_stream_TDATA,
        input_stream_TVALID => input_stream_TVALID,
        input_stream_TREADY => get_image_stream_U0_input_stream_TREADY,
        input_stream_TKEEP => input_stream_TKEEP,
        input_stream_TSTRB => input_stream_TSTRB,
        input_stream_TUSER => input_stream_TUSER,
        input_stream_TLAST => input_stream_TLAST,
        input_stream_TID => input_stream_TID,
        input_stream_TDEST => input_stream_TDEST,
        msg_strm_din => get_image_stream_U0_msg_strm_din,
        msg_strm_num_data_valid => msg_strm_num_data_valid,
        msg_strm_fifo_cap => msg_strm_fifo_cap,
        msg_strm_full_n => msg_strm_full_n,
        msg_strm_write => get_image_stream_U0_msg_strm_write,
        len_strm_din => get_image_stream_U0_len_strm_din,
        len_strm_num_data_valid => len_strm_num_data_valid,
        len_strm_fifo_cap => len_strm_fifo_cap,
        len_strm_full_n => len_strm_full_n,
        len_strm_write => get_image_stream_U0_len_strm_write,
        end_len_strm_din => get_image_stream_U0_end_len_strm_din,
        end_len_strm_num_data_valid => end_len_strm_num_data_valid,
        end_len_strm_fifo_cap => end_len_strm_fifo_cap,
        end_len_strm_full_n => end_len_strm_full_n,
        end_len_strm_write => get_image_stream_U0_end_len_strm_write);

    sha256_64_U0 : component top_module_sha256_64_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sha256_64_U0_ap_start,
        start_full_n => start_for_set_hash_stream_U0_full_n,
        ap_done => sha256_64_U0_ap_done,
        ap_continue => sha256_64_U0_ap_continue,
        ap_idle => sha256_64_U0_ap_idle,
        ap_ready => sha256_64_U0_ap_ready,
        start_out => sha256_64_U0_start_out,
        start_write => sha256_64_U0_start_write,
        msg_strm_dout => msg_strm_dout,
        msg_strm_num_data_valid => msg_strm_num_data_valid,
        msg_strm_fifo_cap => msg_strm_fifo_cap,
        msg_strm_empty_n => msg_strm_empty_n,
        msg_strm_read => sha256_64_U0_msg_strm_read,
        len_strm_dout => len_strm_dout,
        len_strm_num_data_valid => len_strm_num_data_valid,
        len_strm_fifo_cap => len_strm_fifo_cap,
        len_strm_empty_n => len_strm_empty_n,
        len_strm_read => sha256_64_U0_len_strm_read,
        end_len_strm_dout => end_len_strm_dout,
        end_len_strm_num_data_valid => end_len_strm_num_data_valid,
        end_len_strm_fifo_cap => end_len_strm_fifo_cap,
        end_len_strm_empty_n => end_len_strm_empty_n,
        end_len_strm_read => sha256_64_U0_end_len_strm_read,
        hash_strm_din => sha256_64_U0_hash_strm_din,
        hash_strm_num_data_valid => hash_strm_num_data_valid,
        hash_strm_fifo_cap => hash_strm_fifo_cap,
        hash_strm_full_n => hash_strm_full_n,
        hash_strm_write => sha256_64_U0_hash_strm_write,
        end_hash_strm_din => sha256_64_U0_end_hash_strm_din,
        end_hash_strm_num_data_valid => end_hash_strm_num_data_valid,
        end_hash_strm_fifo_cap => end_hash_strm_fifo_cap,
        end_hash_strm_full_n => end_hash_strm_full_n,
        end_hash_strm_write => sha256_64_U0_end_hash_strm_write);

    set_hash_stream_U0 : component top_module_set_hash_stream
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => set_hash_stream_U0_ap_start,
        ap_done => set_hash_stream_U0_ap_done,
        ap_continue => set_hash_stream_U0_ap_continue,
        ap_idle => set_hash_stream_U0_ap_idle,
        ap_ready => set_hash_stream_U0_ap_ready,
        hash_strm_dout => hash_strm_dout,
        hash_strm_num_data_valid => hash_strm_num_data_valid,
        hash_strm_fifo_cap => hash_strm_fifo_cap,
        hash_strm_empty_n => hash_strm_empty_n,
        hash_strm_read => set_hash_stream_U0_hash_strm_read,
        end_hash_strm_dout => end_hash_strm_dout,
        end_hash_strm_num_data_valid => end_hash_strm_num_data_valid,
        end_hash_strm_fifo_cap => end_hash_strm_fifo_cap,
        end_hash_strm_empty_n => end_hash_strm_empty_n,
        end_hash_strm_read => set_hash_stream_U0_end_hash_strm_read,
        ap_return_0 => set_hash_stream_U0_ap_return_0,
        ap_return_1 => set_hash_stream_U0_ap_return_1);

    logmap_U0 : component top_module_logmap
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => logmap_U0_ap_start,
        ap_done => logmap_U0_ap_done,
        ap_continue => logmap_U0_ap_continue,
        ap_idle => logmap_U0_ap_idle,
        ap_ready => logmap_U0_ap_ready,
        p_read => m_perm_channel_dout,
        p_read1 => m_diff_channel_dout,
        output_stream_TDATA => logmap_U0_output_stream_TDATA,
        output_stream_TVALID => logmap_U0_output_stream_TVALID,
        output_stream_TREADY => output_stream_TREADY,
        output_stream_TKEEP => logmap_U0_output_stream_TKEEP,
        output_stream_TSTRB => logmap_U0_output_stream_TSTRB,
        output_stream_TUSER => logmap_U0_output_stream_TUSER,
        output_stream_TLAST => logmap_U0_output_stream_TLAST,
        output_stream_TID => logmap_U0_output_stream_TID,
        output_stream_TDEST => logmap_U0_output_stream_TDEST,
        u_perm_dout => u_diff_c_dout,
        u_perm_num_data_valid => u_diff_c_num_data_valid,
        u_perm_fifo_cap => u_diff_c_fifo_cap,
        u_perm_empty_n => u_diff_c_empty_n,
        u_perm_read => logmap_U0_u_perm_read,
        u_diff_dout => u_perm_c_dout,
        u_diff_num_data_valid => u_perm_c_num_data_valid,
        u_diff_fifo_cap => u_perm_c_fifo_cap,
        u_diff_empty_n => u_perm_c_empty_n,
        u_diff_read => logmap_U0_u_diff_read,
        u_dt_dout => u_dt_c_dout,
        u_dt_num_data_valid => u_dt_c_num_data_valid,
        u_dt_fifo_cap => u_dt_c_fifo_cap,
        u_dt_empty_n => u_dt_c_empty_n,
        u_dt_read => logmap_U0_u_dt_read);

    u_perm_c_U : component top_module_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_u_perm_c_din,
        if_full_n => u_perm_c_full_n,
        if_write => entry_proc_U0_u_perm_c_write,
        if_dout => u_perm_c_dout,
        if_num_data_valid => u_perm_c_num_data_valid,
        if_fifo_cap => u_perm_c_fifo_cap,
        if_empty_n => u_perm_c_empty_n,
        if_read => logmap_U0_u_diff_read);

    u_diff_c_U : component top_module_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_u_diff_c_din,
        if_full_n => u_diff_c_full_n,
        if_write => entry_proc_U0_u_diff_c_write,
        if_dout => u_diff_c_dout,
        if_num_data_valid => u_diff_c_num_data_valid,
        if_fifo_cap => u_diff_c_fifo_cap,
        if_empty_n => u_diff_c_empty_n,
        if_read => logmap_U0_u_perm_read);

    u_dt_c_U : component top_module_fifo_w32_d5_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_u_dt_c_din,
        if_full_n => u_dt_c_full_n,
        if_write => entry_proc_U0_u_dt_c_write,
        if_dout => u_dt_c_dout,
        if_num_data_valid => u_dt_c_num_data_valid,
        if_fifo_cap => u_dt_c_fifo_cap,
        if_empty_n => u_dt_c_empty_n,
        if_read => logmap_U0_u_dt_read);

    msg_strm_U : component top_module_fifo_w64_d32768_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_image_stream_U0_msg_strm_din,
        if_full_n => msg_strm_full_n,
        if_write => get_image_stream_U0_msg_strm_write,
        if_dout => msg_strm_dout,
        if_num_data_valid => msg_strm_num_data_valid,
        if_fifo_cap => msg_strm_fifo_cap,
        if_empty_n => msg_strm_empty_n,
        if_read => sha256_64_U0_msg_strm_read);

    len_strm_U : component top_module_fifo_w64_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_image_stream_U0_len_strm_din,
        if_full_n => len_strm_full_n,
        if_write => get_image_stream_U0_len_strm_write,
        if_dout => len_strm_dout,
        if_num_data_valid => len_strm_num_data_valid,
        if_fifo_cap => len_strm_fifo_cap,
        if_empty_n => len_strm_empty_n,
        if_read => sha256_64_U0_len_strm_read);

    end_len_strm_U : component top_module_fifo_w1_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => get_image_stream_U0_end_len_strm_din,
        if_full_n => end_len_strm_full_n,
        if_write => get_image_stream_U0_end_len_strm_write,
        if_dout => end_len_strm_dout,
        if_num_data_valid => end_len_strm_num_data_valid,
        if_fifo_cap => end_len_strm_fifo_cap,
        if_empty_n => end_len_strm_empty_n,
        if_read => sha256_64_U0_end_len_strm_read);

    hash_strm_U : component top_module_fifo_w256_d1_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sha256_64_U0_hash_strm_din,
        if_full_n => hash_strm_full_n,
        if_write => sha256_64_U0_hash_strm_write,
        if_dout => hash_strm_dout,
        if_num_data_valid => hash_strm_num_data_valid,
        if_fifo_cap => hash_strm_fifo_cap,
        if_empty_n => hash_strm_empty_n,
        if_read => set_hash_stream_U0_hash_strm_read);

    end_hash_strm_U : component top_module_fifo_w1_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sha256_64_U0_end_hash_strm_din,
        if_full_n => end_hash_strm_full_n,
        if_write => sha256_64_U0_end_hash_strm_write,
        if_dout => end_hash_strm_dout,
        if_num_data_valid => end_hash_strm_num_data_valid,
        if_fifo_cap => end_hash_strm_fifo_cap,
        if_empty_n => end_hash_strm_empty_n,
        if_read => set_hash_stream_U0_end_hash_strm_read);

    m_perm_channel_U : component top_module_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_hash_stream_U0_ap_return_0,
        if_full_n => m_perm_channel_full_n,
        if_write => ap_channel_done_m_perm_channel,
        if_dout => m_perm_channel_dout,
        if_num_data_valid => m_perm_channel_num_data_valid,
        if_fifo_cap => m_perm_channel_fifo_cap,
        if_empty_n => m_perm_channel_empty_n,
        if_read => logmap_U0_ap_ready);

    m_diff_channel_U : component top_module_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => set_hash_stream_U0_ap_return_1,
        if_full_n => m_diff_channel_full_n,
        if_write => ap_channel_done_m_diff_channel,
        if_dout => m_diff_channel_dout,
        if_num_data_valid => m_diff_channel_num_data_valid,
        if_fifo_cap => m_diff_channel_fifo_cap,
        if_empty_n => m_diff_channel_empty_n,
        if_read => logmap_U0_ap_ready);

    start_for_sha256_64_U0_U : component top_module_start_for_sha256_64_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sha256_64_U0_din,
        if_full_n => start_for_sha256_64_U0_full_n,
        if_write => get_image_stream_U0_start_write,
        if_dout => start_for_sha256_64_U0_dout,
        if_empty_n => start_for_sha256_64_U0_empty_n,
        if_read => sha256_64_U0_ap_ready);

    start_for_set_hash_stream_U0_U : component top_module_start_for_set_hash_stream_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_set_hash_stream_U0_din,
        if_full_n => start_for_set_hash_stream_U0_full_n,
        if_write => sha256_64_U0_start_write,
        if_dout => start_for_set_hash_stream_U0_dout,
        if_empty_n => start_for_set_hash_stream_U0_empty_n,
        if_read => set_hash_stream_U0_ap_ready);





    ap_sync_reg_channel_write_m_diff_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_m_diff_channel <= ap_const_logic_0;
            else
                if (((set_hash_stream_U0_ap_done and set_hash_stream_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_m_diff_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_m_diff_channel <= ap_sync_channel_write_m_diff_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_m_perm_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_m_perm_channel <= ap_const_logic_0;
            else
                if (((set_hash_stream_U0_ap_done and set_hash_stream_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_m_perm_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_m_perm_channel <= ap_sync_channel_write_m_perm_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_get_image_stream_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_get_image_stream_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_get_image_stream_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_get_image_stream_U0_ap_ready <= ap_sync_get_image_stream_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_m_diff_channel <= (set_hash_stream_U0_ap_done and (ap_sync_reg_channel_write_m_diff_channel xor ap_const_logic_1));
    ap_channel_done_m_perm_channel <= (set_hash_stream_U0_ap_done and (ap_sync_reg_channel_write_m_perm_channel xor ap_const_logic_1));
    ap_done <= logmap_U0_ap_done;
    ap_idle <= (sha256_64_U0_ap_idle and set_hash_stream_U0_ap_idle and logmap_U0_ap_idle and get_image_stream_U0_ap_idle and (m_diff_channel_empty_n xor ap_const_logic_1) and (m_perm_channel_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_m_diff_channel <= ((m_diff_channel_full_n and ap_channel_done_m_diff_channel) or ap_sync_reg_channel_write_m_diff_channel);
    ap_sync_channel_write_m_perm_channel <= ((m_perm_channel_full_n and ap_channel_done_m_perm_channel) or ap_sync_reg_channel_write_m_perm_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_get_image_stream_U0_ap_ready <= (get_image_stream_U0_ap_ready or ap_sync_reg_get_image_stream_U0_ap_ready);
    ap_sync_ready <= (ap_sync_get_image_stream_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    entry_proc_U0_ap_continue <= ap_const_logic_1;
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    get_image_stream_U0_ap_continue <= ap_const_logic_1;
    get_image_stream_U0_ap_start <= ((ap_sync_reg_get_image_stream_U0_ap_ready xor ap_const_logic_1) and ap_start);
    input_stream_TREADY <= get_image_stream_U0_input_stream_TREADY;
    logmap_U0_ap_continue <= ap_const_logic_1;
    logmap_U0_ap_start <= (m_perm_channel_empty_n and m_diff_channel_empty_n);
    output_stream_TDATA <= logmap_U0_output_stream_TDATA;
    output_stream_TDEST <= logmap_U0_output_stream_TDEST;
    output_stream_TID <= logmap_U0_output_stream_TID;
    output_stream_TKEEP <= logmap_U0_output_stream_TKEEP;
    output_stream_TLAST <= logmap_U0_output_stream_TLAST;
    output_stream_TSTRB <= logmap_U0_output_stream_TSTRB;
    output_stream_TUSER <= logmap_U0_output_stream_TUSER;
    output_stream_TVALID <= logmap_U0_output_stream_TVALID;
    set_hash_stream_U0_ap_continue <= (ap_sync_channel_write_m_perm_channel and ap_sync_channel_write_m_diff_channel);
    set_hash_stream_U0_ap_start <= start_for_set_hash_stream_U0_empty_n;
    sha256_64_U0_ap_continue <= ap_const_logic_1;
    sha256_64_U0_ap_start <= start_for_sha256_64_U0_empty_n;
    start_for_set_hash_stream_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sha256_64_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
