// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_module_set_hash_stream_Pipeline_VITIS_LOOP_44_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h256_V,
        aux_perm_out,
        aux_perm_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [255:0] h256_V;
output  [11:0] aux_perm_out;
output   aux_perm_out_ap_vld;

reg ap_idle;
reg aux_perm_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln44_fu_72_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [11:0] aux_perm_fu_38;
wire   [11:0] aux_perm_1_fu_117_p2;
wire    ap_loop_init;
reg   [11:0] ap_sig_allocacmp_aux_perm_load;
reg   [4:0] i_fu_42;
wire   [4:0] i_4_fu_78_p2;
reg   [4:0] ap_sig_allocacmp_i_3;
wire   [3:0] trunc_ln45_fu_87_p1;
wire   [6:0] shl_ln_fu_91_p3;
wire   [255:0] zext_ln642_fu_99_p1;
wire   [255:0] lshr_ln642_fu_103_p2;
wire   [7:0] h_fu_109_p1;
wire   [11:0] zext_ln46_fu_113_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

top_module_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln44_fu_72_p2 == 1'd0)) begin
            aux_perm_fu_38 <= aux_perm_1_fu_117_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            aux_perm_fu_38 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln44_fu_72_p2 == 1'd0)) begin
            i_fu_42 <= i_4_fu_78_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 5'd0;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_aux_perm_load = 12'd0;
    end else begin
        ap_sig_allocacmp_aux_perm_load = aux_perm_fu_38;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i_3 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_42;
    end
end

always @ (*) begin
    if (((icmp_ln44_fu_72_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        aux_perm_out_ap_vld = 1'b1;
    end else begin
        aux_perm_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign aux_perm_1_fu_117_p2 = (zext_ln46_fu_113_p1 + ap_sig_allocacmp_aux_perm_load);

assign aux_perm_out = aux_perm_fu_38;

assign h_fu_109_p1 = lshr_ln642_fu_103_p2[7:0];

assign i_4_fu_78_p2 = (ap_sig_allocacmp_i_3 + 5'd1);

assign icmp_ln44_fu_72_p2 = ((ap_sig_allocacmp_i_3 == 5'd16) ? 1'b1 : 1'b0);

assign lshr_ln642_fu_103_p2 = h256_V >> zext_ln642_fu_99_p1;

assign shl_ln_fu_91_p3 = {{trunc_ln45_fu_87_p1}, {3'd0}};

assign trunc_ln45_fu_87_p1 = ap_sig_allocacmp_i_3[3:0];

assign zext_ln46_fu_113_p1 = h_fu_109_p1;

assign zext_ln642_fu_99_p1 = shl_ln_fu_91_p3;

endmodule //top_module_set_hash_stream_Pipeline_VITIS_LOOP_44_2
