// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_module_generic_modf_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[63:0] ap_return;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] mask_table_address0;
reg    mask_table_ce0;
wire   [51:0] mask_table_q0;
reg   [0:0] xs_sign_V_reg_300;
reg   [10:0] xs_exp_V_reg_306;
wire   [51:0] xs_sig_V_fu_95_p1;
reg   [51:0] xs_sig_V_reg_314;
wire   [63:0] zext_ln541_fu_109_p1;
wire   [63:0] p_Val2_38_fu_73_p1;
wire   [5:0] index_fu_99_p4;
wire    ap_CS_fsm_state2;
wire   [51:0] xf_sig_V_fu_134_p2;
reg   [51:0] p_Result_s_fu_139_p4;
wire   [52:0] p_Result_70_fu_149_p3;
wire  signed [63:0] sext_ln1204_fu_157_p1;
reg   [63:0] tmp_fu_161_p3;
wire   [63:0] p_Result_71_fu_179_p3;
wire   [10:0] add_ln214_fu_194_p2;
wire   [10:0] trunc_ln214_fu_190_p1;
wire   [0:0] icmp_ln1019_6_fu_173_p2;
wire   [10:0] xf_exp_V_fu_199_p2;
wire   [31:0] zeros_fu_169_p1;
wire   [51:0] r_V_fu_213_p2;
wire   [51:0] zext_ln1669_fu_219_p1;
wire   [10:0] xf_exp_V_2_fu_205_p3;
wire   [51:0] r_V_19_fu_223_p2;
wire   [63:0] p_Result_72_fu_229_p4;
wire   [0:0] icmp_ln1035_fu_114_p2;
wire   [0:0] icmp_ln1035_1_fu_119_p2;
wire   [0:0] xor_ln1035_fu_242_p2;
wire   [0:0] icmp_ln1023_fu_129_p2;
wire   [0:0] icmp_ln1019_fu_124_p2;
wire   [0:0] and_ln18_1_fu_254_p2;
wire   [0:0] and_ln18_fu_248_p2;
wire   [0:0] and_ln18_2_fu_260_p2;
wire   [63:0] bitcast_ln526_fu_186_p1;
wire   [0:0] or_ln1035_fu_274_p2;
wire   [63:0] select_ln18_fu_266_p3;
wire   [63:0] bitcast_ln526_1_fu_238_p1;
wire   [63:0] select_ln1035_fu_280_p3;
wire   [63:0] select_ln1035_1_fu_288_p3;
reg   [63:0] ap_return_preg;
reg   [1:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_return_preg = 64'd0;
end

top_module_generic_modf_double_s_mask_table_ROM_AUTO_1R #(
    .DataWidth( 52 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
mask_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mask_table_address0),
    .ce0(mask_table_ce0),
    .q0(mask_table_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 64'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_return_preg <= select_ln1035_1_fu_288_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        xs_exp_V_reg_306 <= {{p_Val2_38_fu_73_p1[62:52]}};
        xs_sig_V_reg_314 <= xs_sig_V_fu_95_p1;
        xs_sign_V_reg_300 <= p_Val2_38_fu_73_p1[32'd63];
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ap_return = select_ln1035_1_fu_288_p3;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mask_table_ce0 = 1'b1;
    end else begin
        mask_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln214_fu_194_p2 = ($signed(xs_exp_V_reg_306) + $signed(11'd2047));

assign and_ln18_1_fu_254_p2 = (icmp_ln1023_fu_129_p2 & icmp_ln1019_fu_124_p2);

assign and_ln18_2_fu_260_p2 = (and_ln18_fu_248_p2 & and_ln18_1_fu_254_p2);

assign and_ln18_fu_248_p2 = (xor_ln1035_fu_242_p2 & icmp_ln1035_1_fu_119_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign bitcast_ln526_1_fu_238_p1 = p_Result_72_fu_229_p4;

assign bitcast_ln526_fu_186_p1 = p_Result_71_fu_179_p3;

assign icmp_ln1019_6_fu_173_p2 = ((xf_sig_V_fu_134_p2 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1019_fu_124_p2 = ((xs_exp_V_reg_306 == 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln1023_fu_129_p2 = ((xs_sig_V_reg_314 != 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln1035_1_fu_119_p2 = ((xs_exp_V_reg_306 > 11'd1075) ? 1'b1 : 1'b0);

assign icmp_ln1035_fu_114_p2 = ((xs_exp_V_reg_306 < 11'd1023) ? 1'b1 : 1'b0);

assign index_fu_99_p4 = {{p_Val2_38_fu_73_p1[57:52]}};

assign mask_table_address0 = zext_ln541_fu_109_p1;

assign or_ln1035_fu_274_p2 = (icmp_ln1035_fu_114_p2 | icmp_ln1035_1_fu_119_p2);

assign p_Result_70_fu_149_p3 = {{1'd1}, {p_Result_s_fu_139_p4}};

assign p_Result_71_fu_179_p3 = {{xs_sign_V_reg_300}, {63'd0}};

assign p_Result_72_fu_229_p4 = {{{xs_sign_V_reg_300}, {xf_exp_V_2_fu_205_p3}}, {r_V_19_fu_223_p2}};

integer ap_tvar_int_0;

always @ (xf_sig_V_fu_134_p2) begin
    for (ap_tvar_int_0 = 52 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 51 - 0) begin
            p_Result_s_fu_139_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_139_p4[ap_tvar_int_0] = xf_sig_V_fu_134_p2[51 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_38_fu_73_p1 = x;

assign r_V_19_fu_223_p2 = r_V_fu_213_p2 << zext_ln1669_fu_219_p1;

assign r_V_fu_213_p2 = xf_sig_V_fu_134_p2 << 52'd1;

assign select_ln1035_1_fu_288_p3 = ((icmp_ln1035_fu_114_p2[0:0] == 1'b1) ? x : select_ln1035_fu_280_p3);

assign select_ln1035_fu_280_p3 = ((or_ln1035_fu_274_p2[0:0] == 1'b1) ? select_ln18_fu_266_p3 : bitcast_ln526_1_fu_238_p1);

assign select_ln18_fu_266_p3 = ((and_ln18_2_fu_260_p2[0:0] == 1'b1) ? 64'd9223372036854775807 : bitcast_ln526_fu_186_p1);

assign sext_ln1204_fu_157_p1 = $signed(p_Result_70_fu_149_p3);


always @ (sext_ln1204_fu_157_p1) begin
    if (sext_ln1204_fu_157_p1[0] == 1'b1) begin
        tmp_fu_161_p3 = 64'd0;
    end else if (sext_ln1204_fu_157_p1[1] == 1'b1) begin
        tmp_fu_161_p3 = 64'd1;
    end else if (sext_ln1204_fu_157_p1[2] == 1'b1) begin
        tmp_fu_161_p3 = 64'd2;
    end else if (sext_ln1204_fu_157_p1[3] == 1'b1) begin
        tmp_fu_161_p3 = 64'd3;
    end else if (sext_ln1204_fu_157_p1[4] == 1'b1) begin
        tmp_fu_161_p3 = 64'd4;
    end else if (sext_ln1204_fu_157_p1[5] == 1'b1) begin
        tmp_fu_161_p3 = 64'd5;
    end else if (sext_ln1204_fu_157_p1[6] == 1'b1) begin
        tmp_fu_161_p3 = 64'd6;
    end else if (sext_ln1204_fu_157_p1[7] == 1'b1) begin
        tmp_fu_161_p3 = 64'd7;
    end else if (sext_ln1204_fu_157_p1[8] == 1'b1) begin
        tmp_fu_161_p3 = 64'd8;
    end else if (sext_ln1204_fu_157_p1[9] == 1'b1) begin
        tmp_fu_161_p3 = 64'd9;
    end else if (sext_ln1204_fu_157_p1[10] == 1'b1) begin
        tmp_fu_161_p3 = 64'd10;
    end else if (sext_ln1204_fu_157_p1[11] == 1'b1) begin
        tmp_fu_161_p3 = 64'd11;
    end else if (sext_ln1204_fu_157_p1[12] == 1'b1) begin
        tmp_fu_161_p3 = 64'd12;
    end else if (sext_ln1204_fu_157_p1[13] == 1'b1) begin
        tmp_fu_161_p3 = 64'd13;
    end else if (sext_ln1204_fu_157_p1[14] == 1'b1) begin
        tmp_fu_161_p3 = 64'd14;
    end else if (sext_ln1204_fu_157_p1[15] == 1'b1) begin
        tmp_fu_161_p3 = 64'd15;
    end else if (sext_ln1204_fu_157_p1[16] == 1'b1) begin
        tmp_fu_161_p3 = 64'd16;
    end else if (sext_ln1204_fu_157_p1[17] == 1'b1) begin
        tmp_fu_161_p3 = 64'd17;
    end else if (sext_ln1204_fu_157_p1[18] == 1'b1) begin
        tmp_fu_161_p3 = 64'd18;
    end else if (sext_ln1204_fu_157_p1[19] == 1'b1) begin
        tmp_fu_161_p3 = 64'd19;
    end else if (sext_ln1204_fu_157_p1[20] == 1'b1) begin
        tmp_fu_161_p3 = 64'd20;
    end else if (sext_ln1204_fu_157_p1[21] == 1'b1) begin
        tmp_fu_161_p3 = 64'd21;
    end else if (sext_ln1204_fu_157_p1[22] == 1'b1) begin
        tmp_fu_161_p3 = 64'd22;
    end else if (sext_ln1204_fu_157_p1[23] == 1'b1) begin
        tmp_fu_161_p3 = 64'd23;
    end else if (sext_ln1204_fu_157_p1[24] == 1'b1) begin
        tmp_fu_161_p3 = 64'd24;
    end else if (sext_ln1204_fu_157_p1[25] == 1'b1) begin
        tmp_fu_161_p3 = 64'd25;
    end else if (sext_ln1204_fu_157_p1[26] == 1'b1) begin
        tmp_fu_161_p3 = 64'd26;
    end else if (sext_ln1204_fu_157_p1[27] == 1'b1) begin
        tmp_fu_161_p3 = 64'd27;
    end else if (sext_ln1204_fu_157_p1[28] == 1'b1) begin
        tmp_fu_161_p3 = 64'd28;
    end else if (sext_ln1204_fu_157_p1[29] == 1'b1) begin
        tmp_fu_161_p3 = 64'd29;
    end else if (sext_ln1204_fu_157_p1[30] == 1'b1) begin
        tmp_fu_161_p3 = 64'd30;
    end else if (sext_ln1204_fu_157_p1[31] == 1'b1) begin
        tmp_fu_161_p3 = 64'd31;
    end else if (sext_ln1204_fu_157_p1[32] == 1'b1) begin
        tmp_fu_161_p3 = 64'd32;
    end else if (sext_ln1204_fu_157_p1[33] == 1'b1) begin
        tmp_fu_161_p3 = 64'd33;
    end else if (sext_ln1204_fu_157_p1[34] == 1'b1) begin
        tmp_fu_161_p3 = 64'd34;
    end else if (sext_ln1204_fu_157_p1[35] == 1'b1) begin
        tmp_fu_161_p3 = 64'd35;
    end else if (sext_ln1204_fu_157_p1[36] == 1'b1) begin
        tmp_fu_161_p3 = 64'd36;
    end else if (sext_ln1204_fu_157_p1[37] == 1'b1) begin
        tmp_fu_161_p3 = 64'd37;
    end else if (sext_ln1204_fu_157_p1[38] == 1'b1) begin
        tmp_fu_161_p3 = 64'd38;
    end else if (sext_ln1204_fu_157_p1[39] == 1'b1) begin
        tmp_fu_161_p3 = 64'd39;
    end else if (sext_ln1204_fu_157_p1[40] == 1'b1) begin
        tmp_fu_161_p3 = 64'd40;
    end else if (sext_ln1204_fu_157_p1[41] == 1'b1) begin
        tmp_fu_161_p3 = 64'd41;
    end else if (sext_ln1204_fu_157_p1[42] == 1'b1) begin
        tmp_fu_161_p3 = 64'd42;
    end else if (sext_ln1204_fu_157_p1[43] == 1'b1) begin
        tmp_fu_161_p3 = 64'd43;
    end else if (sext_ln1204_fu_157_p1[44] == 1'b1) begin
        tmp_fu_161_p3 = 64'd44;
    end else if (sext_ln1204_fu_157_p1[45] == 1'b1) begin
        tmp_fu_161_p3 = 64'd45;
    end else if (sext_ln1204_fu_157_p1[46] == 1'b1) begin
        tmp_fu_161_p3 = 64'd46;
    end else if (sext_ln1204_fu_157_p1[47] == 1'b1) begin
        tmp_fu_161_p3 = 64'd47;
    end else if (sext_ln1204_fu_157_p1[48] == 1'b1) begin
        tmp_fu_161_p3 = 64'd48;
    end else if (sext_ln1204_fu_157_p1[49] == 1'b1) begin
        tmp_fu_161_p3 = 64'd49;
    end else if (sext_ln1204_fu_157_p1[50] == 1'b1) begin
        tmp_fu_161_p3 = 64'd50;
    end else if (sext_ln1204_fu_157_p1[51] == 1'b1) begin
        tmp_fu_161_p3 = 64'd51;
    end else if (sext_ln1204_fu_157_p1[52] == 1'b1) begin
        tmp_fu_161_p3 = 64'd52;
    end else if (sext_ln1204_fu_157_p1[53] == 1'b1) begin
        tmp_fu_161_p3 = 64'd53;
    end else if (sext_ln1204_fu_157_p1[54] == 1'b1) begin
        tmp_fu_161_p3 = 64'd54;
    end else if (sext_ln1204_fu_157_p1[55] == 1'b1) begin
        tmp_fu_161_p3 = 64'd55;
    end else if (sext_ln1204_fu_157_p1[56] == 1'b1) begin
        tmp_fu_161_p3 = 64'd56;
    end else if (sext_ln1204_fu_157_p1[57] == 1'b1) begin
        tmp_fu_161_p3 = 64'd57;
    end else if (sext_ln1204_fu_157_p1[58] == 1'b1) begin
        tmp_fu_161_p3 = 64'd58;
    end else if (sext_ln1204_fu_157_p1[59] == 1'b1) begin
        tmp_fu_161_p3 = 64'd59;
    end else if (sext_ln1204_fu_157_p1[60] == 1'b1) begin
        tmp_fu_161_p3 = 64'd60;
    end else if (sext_ln1204_fu_157_p1[61] == 1'b1) begin
        tmp_fu_161_p3 = 64'd61;
    end else if (sext_ln1204_fu_157_p1[62] == 1'b1) begin
        tmp_fu_161_p3 = 64'd62;
    end else if (sext_ln1204_fu_157_p1[63] == 1'b1) begin
        tmp_fu_161_p3 = 64'd63;
    end else begin
        tmp_fu_161_p3 = 64'd64;
    end
end

assign trunc_ln214_fu_190_p1 = tmp_fu_161_p3[10:0];

assign xf_exp_V_2_fu_205_p3 = ((icmp_ln1019_6_fu_173_p2[0:0] == 1'b1) ? 11'd0 : xf_exp_V_fu_199_p2);

assign xf_exp_V_fu_199_p2 = (add_ln214_fu_194_p2 - trunc_ln214_fu_190_p1);

assign xf_sig_V_fu_134_p2 = (xs_sig_V_reg_314 & mask_table_q0);

assign xor_ln1035_fu_242_p2 = (icmp_ln1035_fu_114_p2 ^ 1'd1);

assign xs_sig_V_fu_95_p1 = p_Val2_38_fu_73_p1[51:0];

assign zeros_fu_169_p1 = tmp_fu_161_p3[31:0];

assign zext_ln1669_fu_219_p1 = zeros_fu_169_p1;

assign zext_ln541_fu_109_p1 = index_fu_99_p4;

endmodule //top_module_generic_modf_double_s
