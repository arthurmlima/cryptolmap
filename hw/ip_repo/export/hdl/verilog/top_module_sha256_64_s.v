// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module top_module_sha256_64_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        start_out,
        start_write,
        msg_strm5_dout,
        msg_strm5_num_data_valid,
        msg_strm5_fifo_cap,
        msg_strm5_empty_n,
        msg_strm5_read,
        len_strm6_dout,
        len_strm6_num_data_valid,
        len_strm6_fifo_cap,
        len_strm6_empty_n,
        len_strm6_read,
        end_len_strm7_dout,
        end_len_strm7_num_data_valid,
        end_len_strm7_fifo_cap,
        end_len_strm7_empty_n,
        end_len_strm7_read,
        hash_strm8_din,
        hash_strm8_num_data_valid,
        hash_strm8_fifo_cap,
        hash_strm8_full_n,
        hash_strm8_write,
        end_hash_strm9_din,
        end_hash_strm9_num_data_valid,
        end_hash_strm9_fifo_cap,
        end_hash_strm9_full_n,
        end_hash_strm9_write
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output   start_out;
output   start_write;
input  [63:0] msg_strm5_dout;
input  [15:0] msg_strm5_num_data_valid;
input  [15:0] msg_strm5_fifo_cap;
input   msg_strm5_empty_n;
output   msg_strm5_read;
input  [63:0] len_strm6_dout;
input  [1:0] len_strm6_num_data_valid;
input  [1:0] len_strm6_fifo_cap;
input   len_strm6_empty_n;
output   len_strm6_read;
input  [0:0] end_len_strm7_dout;
input  [1:0] end_len_strm7_num_data_valid;
input  [1:0] end_len_strm7_fifo_cap;
input   end_len_strm7_empty_n;
output   end_len_strm7_read;
output  [255:0] hash_strm8_din;
input  [1:0] hash_strm8_num_data_valid;
input  [1:0] hash_strm8_fifo_cap;
input   hash_strm8_full_n;
output   hash_strm8_write;
output  [0:0] end_hash_strm9_din;
input  [1:0] end_hash_strm9_num_data_valid;
input  [1:0] end_hash_strm9_fifo_cap;
input   end_hash_strm9_full_n;
output   end_hash_strm9_write;

reg ap_done;
reg ap_idle;
reg start_write;
reg msg_strm5_read;
reg len_strm6_read;
reg end_len_strm7_read;
reg hash_strm8_write;
reg end_hash_strm9_write;

reg    real_start;
reg    start_once_reg;
reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    internal_ap_ready;
wire    grp_sha256_top_64_256_s_fu_22_msg_strm5_read;
wire    grp_sha256_top_64_256_s_fu_22_len_strm6_read;
wire    grp_sha256_top_64_256_s_fu_22_end_len_strm7_read;
wire   [255:0] grp_sha256_top_64_256_s_fu_22_hash_strm8_din;
wire    grp_sha256_top_64_256_s_fu_22_hash_strm8_write;
wire   [0:0] grp_sha256_top_64_256_s_fu_22_end_hash_strm9_din;
wire    grp_sha256_top_64_256_s_fu_22_end_hash_strm9_write;
wire    grp_sha256_top_64_256_s_fu_22_ap_start;
wire    grp_sha256_top_64_256_s_fu_22_ap_done;
wire    grp_sha256_top_64_256_s_fu_22_ap_ready;
wire    grp_sha256_top_64_256_s_fu_22_ap_idle;
reg    grp_sha256_top_64_256_s_fu_22_ap_continue;
reg    grp_sha256_top_64_256_s_fu_22_ap_start_reg;
reg    ap_block_state1_ignore_call5;
wire    ap_CS_fsm_state2;
wire    ap_sync_grp_sha256_top_64_256_s_fu_22_ap_ready;
wire    ap_sync_grp_sha256_top_64_256_s_fu_22_ap_done;
reg    ap_block_state2_on_subcall_done;
reg    ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready;
reg    ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done;
reg   [1:0] ap_NS_fsm;
reg    ap_block_state1;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 2'd1;
#0 grp_sha256_top_64_256_s_fu_22_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready = 1'b0;
#0 ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done = 1'b0;
end

top_module_sha256_top_64_256_s grp_sha256_top_64_256_s_fu_22(
    .msg_strm5_dout(msg_strm5_dout),
    .msg_strm5_empty_n(msg_strm5_empty_n),
    .msg_strm5_read(grp_sha256_top_64_256_s_fu_22_msg_strm5_read),
    .len_strm6_dout(len_strm6_dout),
    .len_strm6_empty_n(len_strm6_empty_n),
    .len_strm6_read(grp_sha256_top_64_256_s_fu_22_len_strm6_read),
    .end_len_strm7_dout(end_len_strm7_dout),
    .end_len_strm7_empty_n(end_len_strm7_empty_n),
    .end_len_strm7_read(grp_sha256_top_64_256_s_fu_22_end_len_strm7_read),
    .hash_strm8_din(grp_sha256_top_64_256_s_fu_22_hash_strm8_din),
    .hash_strm8_full_n(hash_strm8_full_n),
    .hash_strm8_write(grp_sha256_top_64_256_s_fu_22_hash_strm8_write),
    .end_hash_strm9_din(grp_sha256_top_64_256_s_fu_22_end_hash_strm9_din),
    .end_hash_strm9_full_n(end_hash_strm9_full_n),
    .end_hash_strm9_write(grp_sha256_top_64_256_s_fu_22_end_hash_strm9_write),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_sha256_top_64_256_s_fu_22_ap_start),
    .ap_done(grp_sha256_top_64_256_s_fu_22_ap_done),
    .ap_ready(grp_sha256_top_64_256_s_fu_22_ap_ready),
    .ap_idle(grp_sha256_top_64_256_s_fu_22_ap_idle),
    .ap_continue(grp_sha256_top_64_256_s_fu_22_ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done <= 1'b0;
        end else if ((grp_sha256_top_64_256_s_fu_22_ap_done == 1'b1)) begin
            ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
            ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready <= 1'b0;
        end else if ((grp_sha256_top_64_256_s_fu_22_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_sha256_top_64_256_s_fu_22_ap_start_reg <= 1'b0;
    end else begin
        if (((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (ap_sync_grp_sha256_top_64_256_s_fu_22_ap_ready == 1'b0)))) begin
            grp_sha256_top_64_256_s_fu_22_ap_start_reg <= 1'b1;
        end else if ((grp_sha256_top_64_256_s_fu_22_ap_ready == 1'b1)) begin
            grp_sha256_top_64_256_s_fu_22_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if (((real_start == 1'b0) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state2_on_subcall_done)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((real_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        end_hash_strm9_write = grp_sha256_top_64_256_s_fu_22_end_hash_strm9_write;
    end else begin
        end_hash_strm9_write = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        end_len_strm7_read = grp_sha256_top_64_256_s_fu_22_end_len_strm7_read;
    end else begin
        end_len_strm7_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        grp_sha256_top_64_256_s_fu_22_ap_continue = 1'b1;
    end else begin
        grp_sha256_top_64_256_s_fu_22_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        hash_strm8_write = grp_sha256_top_64_256_s_fu_22_hash_strm8_write;
    end else begin
        hash_strm8_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
        internal_ap_ready = 1'b1;
    end else begin
        internal_ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        len_strm6_read = grp_sha256_top_64_256_s_fu_22_len_strm6_read;
    end else begin
        len_strm6_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        msg_strm5_read = grp_sha256_top_64_256_s_fu_22_msg_strm5_read;
    end else begin
        msg_strm5_read = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((real_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_block_state2_on_subcall_done))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

always @ (*) begin
    ap_block_state1 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call5 = ((real_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((ap_sync_grp_sha256_top_64_256_s_fu_22_ap_ready & ap_sync_grp_sha256_top_64_256_s_fu_22_ap_done) == 1'b0);
end

assign ap_ready = internal_ap_ready;

assign ap_sync_grp_sha256_top_64_256_s_fu_22_ap_done = (grp_sha256_top_64_256_s_fu_22_ap_done | ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_done);

assign ap_sync_grp_sha256_top_64_256_s_fu_22_ap_ready = (grp_sha256_top_64_256_s_fu_22_ap_ready | ap_sync_reg_grp_sha256_top_64_256_s_fu_22_ap_ready);

assign end_hash_strm9_din = grp_sha256_top_64_256_s_fu_22_end_hash_strm9_din;

assign grp_sha256_top_64_256_s_fu_22_ap_start = grp_sha256_top_64_256_s_fu_22_ap_start_reg;

assign hash_strm8_din = grp_sha256_top_64_256_s_fu_22_hash_strm8_din;

assign start_out = real_start;

endmodule //top_module_sha256_64_s
