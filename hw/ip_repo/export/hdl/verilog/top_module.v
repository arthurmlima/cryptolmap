// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_module_top_module,hls_ip_2022_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=13.047657,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=125,HLS_SYN_DSP=0,HLS_SYN_FF=10577,HLS_SYN_LUT=18622,HLS_VERSION=2022_2}" *)

module top_module (
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        ap_clk,
        ap_rst_n,
        interrupt,
        input_stream_TDATA,
        input_stream_TKEEP,
        input_stream_TSTRB,
        input_stream_TUSER,
        input_stream_TLAST,
        input_stream_TID,
        input_stream_TDEST,
        output_stream_TDATA,
        output_stream_TKEEP,
        output_stream_TSTRB,
        output_stream_TUSER,
        output_stream_TLAST,
        output_stream_TID,
        output_stream_TDEST,
        input_stream_TVALID,
        input_stream_TREADY,
        output_stream_TVALID,
        output_stream_TREADY
);

parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
input   ap_clk;
input   ap_rst_n;
output   interrupt;
input  [63:0] input_stream_TDATA;
input  [7:0] input_stream_TKEEP;
input  [7:0] input_stream_TSTRB;
input  [0:0] input_stream_TUSER;
input  [0:0] input_stream_TLAST;
input  [0:0] input_stream_TID;
input  [0:0] input_stream_TDEST;
output  [31:0] output_stream_TDATA;
output  [3:0] output_stream_TKEEP;
output  [3:0] output_stream_TSTRB;
output  [0:0] output_stream_TUSER;
output  [0:0] output_stream_TLAST;
output  [0:0] output_stream_TID;
output  [0:0] output_stream_TDEST;
input   input_stream_TVALID;
output   input_stream_TREADY;
output   output_stream_TVALID;
input   output_stream_TREADY;

 reg    ap_rst_n_inv;
wire   [31:0] u_dt;
wire   [31:0] u_diff;
wire    ap_start;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire    entry_proc_U0_ap_start;
wire    entry_proc_U0_ap_done;
wire    entry_proc_U0_ap_continue;
wire    entry_proc_U0_ap_idle;
wire    entry_proc_U0_ap_ready;
wire   [31:0] entry_proc_U0_u_diff_c_din;
wire    entry_proc_U0_u_diff_c_write;
wire    get_image_stream_U0_ap_start;
wire    get_image_stream_U0_ap_done;
wire    get_image_stream_U0_ap_continue;
wire    get_image_stream_U0_ap_idle;
wire    get_image_stream_U0_ap_ready;
wire    get_image_stream_U0_start_out;
wire    get_image_stream_U0_start_write;
wire    get_image_stream_U0_input_stream_TREADY;
wire   [63:0] get_image_stream_U0_msg_strm5_din;
wire    get_image_stream_U0_msg_strm5_write;
wire   [63:0] get_image_stream_U0_len_strm6_din;
wire    get_image_stream_U0_len_strm6_write;
wire   [0:0] get_image_stream_U0_end_len_strm7_din;
wire    get_image_stream_U0_end_len_strm7_write;
wire    sha256_64_U0_ap_start;
wire    sha256_64_U0_ap_done;
wire    sha256_64_U0_ap_continue;
wire    sha256_64_U0_ap_idle;
wire    sha256_64_U0_ap_ready;
wire    sha256_64_U0_start_out;
wire    sha256_64_U0_start_write;
wire    sha256_64_U0_msg_strm5_read;
wire    sha256_64_U0_len_strm6_read;
wire    sha256_64_U0_end_len_strm7_read;
wire   [255:0] sha256_64_U0_hash_strm8_din;
wire    sha256_64_U0_hash_strm8_write;
wire   [0:0] sha256_64_U0_end_hash_strm9_din;
wire    sha256_64_U0_end_hash_strm9_write;
wire    set_hash_stream_U0_ap_start;
wire    set_hash_stream_U0_ap_done;
wire    set_hash_stream_U0_ap_continue;
wire    set_hash_stream_U0_ap_idle;
wire    set_hash_stream_U0_ap_ready;
wire   [31:0] set_hash_stream_U0_m_perm;
wire    set_hash_stream_U0_m_perm_ap_vld;
wire    set_hash_stream_U0_hash_strm8_read;
wire    set_hash_stream_U0_end_hash_strm9_read;
wire   [31:0] set_hash_stream_U0_ap_return;
wire    ap_channel_done_m_diff_channel;
wire    m_diff_channel_full_n;
reg    ap_sync_reg_channel_write_m_diff_channel;
wire    ap_sync_channel_write_m_diff_channel;
wire    ap_sync_continue;
wire    logmap_U0_ap_start;
wire    logmap_U0_ap_done;
wire    logmap_U0_ap_continue;
wire    logmap_U0_ap_idle;
wire    logmap_U0_ap_ready;
wire   [31:0] logmap_U0_output_stream_TDATA;
wire    logmap_U0_output_stream_TVALID;
wire   [3:0] logmap_U0_output_stream_TKEEP;
wire   [3:0] logmap_U0_output_stream_TSTRB;
wire   [0:0] logmap_U0_output_stream_TUSER;
wire   [0:0] logmap_U0_output_stream_TLAST;
wire   [0:0] logmap_U0_output_stream_TID;
wire   [0:0] logmap_U0_output_stream_TDEST;
wire    logmap_U0_u_diff_read;
wire    u_diff_c_full_n;
wire   [31:0] u_diff_c_dout;
wire   [3:0] u_diff_c_num_data_valid;
wire   [3:0] u_diff_c_fifo_cap;
wire    u_diff_c_empty_n;
wire    msg_strm_full_n;
wire   [63:0] msg_strm_dout;
wire   [15:0] msg_strm_num_data_valid;
wire   [15:0] msg_strm_fifo_cap;
wire    msg_strm_empty_n;
wire    len_strm_full_n;
wire   [63:0] len_strm_dout;
wire   [1:0] len_strm_num_data_valid;
wire   [1:0] len_strm_fifo_cap;
wire    len_strm_empty_n;
wire    end_len_strm_full_n;
wire   [0:0] end_len_strm_dout;
wire   [1:0] end_len_strm_num_data_valid;
wire   [1:0] end_len_strm_fifo_cap;
wire    end_len_strm_empty_n;
wire    hash_strm_full_n;
wire   [255:0] hash_strm_dout;
wire   [1:0] hash_strm_num_data_valid;
wire   [1:0] hash_strm_fifo_cap;
wire    hash_strm_empty_n;
wire    end_hash_strm_full_n;
wire   [0:0] end_hash_strm_dout;
wire   [1:0] end_hash_strm_num_data_valid;
wire   [1:0] end_hash_strm_fifo_cap;
wire    end_hash_strm_empty_n;
wire   [31:0] m_diff_channel_dout;
wire   [1:0] m_diff_channel_num_data_valid;
wire   [1:0] m_diff_channel_fifo_cap;
wire    m_diff_channel_empty_n;
wire    ap_sync_done;
wire    ap_sync_ready;
reg    ap_sync_reg_entry_proc_U0_ap_ready;
wire    ap_sync_entry_proc_U0_ap_ready;
reg    ap_sync_reg_get_image_stream_U0_ap_ready;
wire    ap_sync_get_image_stream_U0_ap_ready;
wire   [0:0] start_for_sha256_64_U0_din;
wire    start_for_sha256_64_U0_full_n;
wire   [0:0] start_for_sha256_64_U0_dout;
wire    start_for_sha256_64_U0_empty_n;
wire   [0:0] start_for_set_hash_stream_U0_din;
wire    start_for_set_hash_stream_U0_full_n;
wire   [0:0] start_for_set_hash_stream_U0_dout;
wire    start_for_set_hash_stream_U0_empty_n;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_m_diff_channel = 1'b0;
#0 ap_sync_reg_entry_proc_U0_ap_ready = 1'b0;
#0 ap_sync_reg_get_image_stream_U0_ap_ready = 1'b0;
end

top_module_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .u_dt(u_dt),
    .u_diff(u_diff),
    .m_perm(set_hash_stream_U0_m_perm),
    .m_perm_ap_vld(set_hash_stream_U0_m_perm_ap_vld),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

top_module_entry_proc entry_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(entry_proc_U0_ap_start),
    .ap_done(entry_proc_U0_ap_done),
    .ap_continue(entry_proc_U0_ap_continue),
    .ap_idle(entry_proc_U0_ap_idle),
    .ap_ready(entry_proc_U0_ap_ready),
    .u_diff(u_diff),
    .u_diff_c_din(entry_proc_U0_u_diff_c_din),
    .u_diff_c_num_data_valid(u_diff_c_num_data_valid),
    .u_diff_c_fifo_cap(u_diff_c_fifo_cap),
    .u_diff_c_full_n(u_diff_c_full_n),
    .u_diff_c_write(entry_proc_U0_u_diff_c_write)
);

top_module_get_image_stream get_image_stream_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(get_image_stream_U0_ap_start),
    .start_full_n(start_for_sha256_64_U0_full_n),
    .ap_done(get_image_stream_U0_ap_done),
    .ap_continue(get_image_stream_U0_ap_continue),
    .ap_idle(get_image_stream_U0_ap_idle),
    .ap_ready(get_image_stream_U0_ap_ready),
    .start_out(get_image_stream_U0_start_out),
    .start_write(get_image_stream_U0_start_write),
    .input_stream_TDATA(input_stream_TDATA),
    .input_stream_TVALID(input_stream_TVALID),
    .input_stream_TREADY(get_image_stream_U0_input_stream_TREADY),
    .input_stream_TKEEP(input_stream_TKEEP),
    .input_stream_TSTRB(input_stream_TSTRB),
    .input_stream_TUSER(input_stream_TUSER),
    .input_stream_TLAST(input_stream_TLAST),
    .input_stream_TID(input_stream_TID),
    .input_stream_TDEST(input_stream_TDEST),
    .msg_strm5_din(get_image_stream_U0_msg_strm5_din),
    .msg_strm5_num_data_valid(msg_strm_num_data_valid),
    .msg_strm5_fifo_cap(msg_strm_fifo_cap),
    .msg_strm5_full_n(msg_strm_full_n),
    .msg_strm5_write(get_image_stream_U0_msg_strm5_write),
    .len_strm6_din(get_image_stream_U0_len_strm6_din),
    .len_strm6_num_data_valid(len_strm_num_data_valid),
    .len_strm6_fifo_cap(len_strm_fifo_cap),
    .len_strm6_full_n(len_strm_full_n),
    .len_strm6_write(get_image_stream_U0_len_strm6_write),
    .end_len_strm7_din(get_image_stream_U0_end_len_strm7_din),
    .end_len_strm7_num_data_valid(end_len_strm_num_data_valid),
    .end_len_strm7_fifo_cap(end_len_strm_fifo_cap),
    .end_len_strm7_full_n(end_len_strm_full_n),
    .end_len_strm7_write(get_image_stream_U0_end_len_strm7_write)
);

top_module_sha256_64_s sha256_64_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(sha256_64_U0_ap_start),
    .start_full_n(start_for_set_hash_stream_U0_full_n),
    .ap_done(sha256_64_U0_ap_done),
    .ap_continue(sha256_64_U0_ap_continue),
    .ap_idle(sha256_64_U0_ap_idle),
    .ap_ready(sha256_64_U0_ap_ready),
    .start_out(sha256_64_U0_start_out),
    .start_write(sha256_64_U0_start_write),
    .msg_strm5_dout(msg_strm_dout),
    .msg_strm5_num_data_valid(msg_strm_num_data_valid),
    .msg_strm5_fifo_cap(msg_strm_fifo_cap),
    .msg_strm5_empty_n(msg_strm_empty_n),
    .msg_strm5_read(sha256_64_U0_msg_strm5_read),
    .len_strm6_dout(len_strm_dout),
    .len_strm6_num_data_valid(len_strm_num_data_valid),
    .len_strm6_fifo_cap(len_strm_fifo_cap),
    .len_strm6_empty_n(len_strm_empty_n),
    .len_strm6_read(sha256_64_U0_len_strm6_read),
    .end_len_strm7_dout(end_len_strm_dout),
    .end_len_strm7_num_data_valid(end_len_strm_num_data_valid),
    .end_len_strm7_fifo_cap(end_len_strm_fifo_cap),
    .end_len_strm7_empty_n(end_len_strm_empty_n),
    .end_len_strm7_read(sha256_64_U0_end_len_strm7_read),
    .hash_strm8_din(sha256_64_U0_hash_strm8_din),
    .hash_strm8_num_data_valid(hash_strm_num_data_valid),
    .hash_strm8_fifo_cap(hash_strm_fifo_cap),
    .hash_strm8_full_n(hash_strm_full_n),
    .hash_strm8_write(sha256_64_U0_hash_strm8_write),
    .end_hash_strm9_din(sha256_64_U0_end_hash_strm9_din),
    .end_hash_strm9_num_data_valid(end_hash_strm_num_data_valid),
    .end_hash_strm9_fifo_cap(end_hash_strm_fifo_cap),
    .end_hash_strm9_full_n(end_hash_strm_full_n),
    .end_hash_strm9_write(sha256_64_U0_end_hash_strm9_write)
);

top_module_set_hash_stream set_hash_stream_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(set_hash_stream_U0_ap_start),
    .ap_done(set_hash_stream_U0_ap_done),
    .ap_continue(set_hash_stream_U0_ap_continue),
    .ap_idle(set_hash_stream_U0_ap_idle),
    .ap_ready(set_hash_stream_U0_ap_ready),
    .m_perm(set_hash_stream_U0_m_perm),
    .m_perm_ap_vld(set_hash_stream_U0_m_perm_ap_vld),
    .hash_strm8_dout(hash_strm_dout),
    .hash_strm8_num_data_valid(hash_strm_num_data_valid),
    .hash_strm8_fifo_cap(hash_strm_fifo_cap),
    .hash_strm8_empty_n(hash_strm_empty_n),
    .hash_strm8_read(set_hash_stream_U0_hash_strm8_read),
    .end_hash_strm9_dout(end_hash_strm_dout),
    .end_hash_strm9_num_data_valid(end_hash_strm_num_data_valid),
    .end_hash_strm9_fifo_cap(end_hash_strm_fifo_cap),
    .end_hash_strm9_empty_n(end_hash_strm_empty_n),
    .end_hash_strm9_read(set_hash_stream_U0_end_hash_strm9_read),
    .ap_return(set_hash_stream_U0_ap_return)
);

top_module_logmap logmap_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(logmap_U0_ap_start),
    .ap_done(logmap_U0_ap_done),
    .ap_continue(logmap_U0_ap_continue),
    .ap_idle(logmap_U0_ap_idle),
    .ap_ready(logmap_U0_ap_ready),
    .p_read(m_diff_channel_dout),
    .output_stream_TDATA(logmap_U0_output_stream_TDATA),
    .output_stream_TVALID(logmap_U0_output_stream_TVALID),
    .output_stream_TREADY(output_stream_TREADY),
    .output_stream_TKEEP(logmap_U0_output_stream_TKEEP),
    .output_stream_TSTRB(logmap_U0_output_stream_TSTRB),
    .output_stream_TUSER(logmap_U0_output_stream_TUSER),
    .output_stream_TLAST(logmap_U0_output_stream_TLAST),
    .output_stream_TID(logmap_U0_output_stream_TID),
    .output_stream_TDEST(logmap_U0_output_stream_TDEST),
    .u_diff_dout(u_diff_c_dout),
    .u_diff_num_data_valid(u_diff_c_num_data_valid),
    .u_diff_fifo_cap(u_diff_c_fifo_cap),
    .u_diff_empty_n(u_diff_c_empty_n),
    .u_diff_read(logmap_U0_u_diff_read)
);

top_module_fifo_w32_d5_S u_diff_c_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(entry_proc_U0_u_diff_c_din),
    .if_full_n(u_diff_c_full_n),
    .if_write(entry_proc_U0_u_diff_c_write),
    .if_dout(u_diff_c_dout),
    .if_num_data_valid(u_diff_c_num_data_valid),
    .if_fifo_cap(u_diff_c_fifo_cap),
    .if_empty_n(u_diff_c_empty_n),
    .if_read(logmap_U0_u_diff_read)
);

top_module_fifo_w64_d32768_A msg_strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_image_stream_U0_msg_strm5_din),
    .if_full_n(msg_strm_full_n),
    .if_write(get_image_stream_U0_msg_strm5_write),
    .if_dout(msg_strm_dout),
    .if_num_data_valid(msg_strm_num_data_valid),
    .if_fifo_cap(msg_strm_fifo_cap),
    .if_empty_n(msg_strm_empty_n),
    .if_read(sha256_64_U0_msg_strm5_read)
);

top_module_fifo_w64_d1_S len_strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_image_stream_U0_len_strm6_din),
    .if_full_n(len_strm_full_n),
    .if_write(get_image_stream_U0_len_strm6_write),
    .if_dout(len_strm_dout),
    .if_num_data_valid(len_strm_num_data_valid),
    .if_fifo_cap(len_strm_fifo_cap),
    .if_empty_n(len_strm_empty_n),
    .if_read(sha256_64_U0_len_strm6_read)
);

top_module_fifo_w1_d1_S end_len_strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(get_image_stream_U0_end_len_strm7_din),
    .if_full_n(end_len_strm_full_n),
    .if_write(get_image_stream_U0_end_len_strm7_write),
    .if_dout(end_len_strm_dout),
    .if_num_data_valid(end_len_strm_num_data_valid),
    .if_fifo_cap(end_len_strm_fifo_cap),
    .if_empty_n(end_len_strm_empty_n),
    .if_read(sha256_64_U0_end_len_strm7_read)
);

top_module_fifo_w256_d1_S hash_strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sha256_64_U0_hash_strm8_din),
    .if_full_n(hash_strm_full_n),
    .if_write(sha256_64_U0_hash_strm8_write),
    .if_dout(hash_strm_dout),
    .if_num_data_valid(hash_strm_num_data_valid),
    .if_fifo_cap(hash_strm_fifo_cap),
    .if_empty_n(hash_strm_empty_n),
    .if_read(set_hash_stream_U0_hash_strm8_read)
);

top_module_fifo_w1_d2_S end_hash_strm_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(sha256_64_U0_end_hash_strm9_din),
    .if_full_n(end_hash_strm_full_n),
    .if_write(sha256_64_U0_end_hash_strm9_write),
    .if_dout(end_hash_strm_dout),
    .if_num_data_valid(end_hash_strm_num_data_valid),
    .if_fifo_cap(end_hash_strm_fifo_cap),
    .if_empty_n(end_hash_strm_empty_n),
    .if_read(set_hash_stream_U0_end_hash_strm9_read)
);

top_module_fifo_w32_d2_S m_diff_channel_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(set_hash_stream_U0_ap_return),
    .if_full_n(m_diff_channel_full_n),
    .if_write(ap_channel_done_m_diff_channel),
    .if_dout(m_diff_channel_dout),
    .if_num_data_valid(m_diff_channel_num_data_valid),
    .if_fifo_cap(m_diff_channel_fifo_cap),
    .if_empty_n(m_diff_channel_empty_n),
    .if_read(logmap_U0_ap_ready)
);

top_module_start_for_sha256_64_U0 start_for_sha256_64_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_sha256_64_U0_din),
    .if_full_n(start_for_sha256_64_U0_full_n),
    .if_write(get_image_stream_U0_start_write),
    .if_dout(start_for_sha256_64_U0_dout),
    .if_empty_n(start_for_sha256_64_U0_empty_n),
    .if_read(sha256_64_U0_ap_ready)
);

top_module_start_for_set_hash_stream_U0 start_for_set_hash_stream_U0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_set_hash_stream_U0_din),
    .if_full_n(start_for_set_hash_stream_U0_full_n),
    .if_write(sha256_64_U0_start_write),
    .if_dout(start_for_set_hash_stream_U0_dout),
    .if_empty_n(start_for_set_hash_stream_U0_empty_n),
    .if_read(set_hash_stream_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_channel_write_m_diff_channel <= 1'b0;
    end else begin
        if (((set_hash_stream_U0_ap_done & set_hash_stream_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_m_diff_channel <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_m_diff_channel <= ap_sync_channel_write_m_diff_channel;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_entry_proc_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_get_image_stream_U0_ap_ready <= 1'b0;
    end else begin
        if (((ap_sync_ready & ap_start) == 1'b1)) begin
            ap_sync_reg_get_image_stream_U0_ap_ready <= 1'b0;
        end else begin
            ap_sync_reg_get_image_stream_U0_ap_ready <= ap_sync_get_image_stream_U0_ap_ready;
        end
    end
end

assign ap_channel_done_m_diff_channel = (set_hash_stream_U0_ap_done & (ap_sync_reg_channel_write_m_diff_channel ^ 1'b1));

assign ap_done = ap_sync_done;

assign ap_idle = (sha256_64_U0_ap_idle & set_hash_stream_U0_ap_idle & logmap_U0_ap_idle & get_image_stream_U0_ap_idle & (m_diff_channel_empty_n ^ 1'b1) & entry_proc_U0_ap_idle);

assign ap_ready = ap_sync_ready;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_channel_write_m_diff_channel = ((m_diff_channel_full_n & ap_channel_done_m_diff_channel) | ap_sync_reg_channel_write_m_diff_channel);

assign ap_sync_continue = ap_sync_done;

assign ap_sync_done = (set_hash_stream_U0_ap_done & logmap_U0_ap_done);

assign ap_sync_entry_proc_U0_ap_ready = (entry_proc_U0_ap_ready | ap_sync_reg_entry_proc_U0_ap_ready);

assign ap_sync_get_image_stream_U0_ap_ready = (get_image_stream_U0_ap_ready | ap_sync_reg_get_image_stream_U0_ap_ready);

assign ap_sync_ready = (ap_sync_get_image_stream_U0_ap_ready & ap_sync_entry_proc_U0_ap_ready);

assign entry_proc_U0_ap_continue = 1'b1;

assign entry_proc_U0_ap_start = ((ap_sync_reg_entry_proc_U0_ap_ready ^ 1'b1) & ap_start);

assign get_image_stream_U0_ap_continue = 1'b1;

assign get_image_stream_U0_ap_start = ((ap_sync_reg_get_image_stream_U0_ap_ready ^ 1'b1) & ap_start);

assign input_stream_TREADY = get_image_stream_U0_input_stream_TREADY;

assign logmap_U0_ap_continue = ap_sync_done;

assign logmap_U0_ap_start = m_diff_channel_empty_n;

assign output_stream_TDATA = logmap_U0_output_stream_TDATA;

assign output_stream_TDEST = logmap_U0_output_stream_TDEST;

assign output_stream_TID = logmap_U0_output_stream_TID;

assign output_stream_TKEEP = logmap_U0_output_stream_TKEEP;

assign output_stream_TLAST = logmap_U0_output_stream_TLAST;

assign output_stream_TSTRB = logmap_U0_output_stream_TSTRB;

assign output_stream_TUSER = logmap_U0_output_stream_TUSER;

assign output_stream_TVALID = logmap_U0_output_stream_TVALID;

assign set_hash_stream_U0_ap_continue = (ap_sync_continue & ap_sync_channel_write_m_diff_channel);

assign set_hash_stream_U0_ap_start = start_for_set_hash_stream_U0_empty_n;

assign sha256_64_U0_ap_continue = 1'b1;

assign sha256_64_U0_ap_start = start_for_sha256_64_U0_empty_n;

assign start_for_set_hash_stream_U0_din = 1'b1;

assign start_for_sha256_64_U0_din = 1'b1;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "top_module_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "top_module_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //top_module

