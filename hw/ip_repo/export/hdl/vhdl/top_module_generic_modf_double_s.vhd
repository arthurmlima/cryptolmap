-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_generic_modf_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of top_module_generic_modf_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv11_433 : STD_LOGIC_VECTOR (10 downto 0) := "10000110011";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv52_1 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal mask_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mask_table_ce0 : STD_LOGIC;
    signal mask_table_q0 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sign_V_reg_300 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_exp_V_reg_306 : STD_LOGIC_VECTOR (10 downto 0);
    signal xs_sig_V_fu_95_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xs_sig_V_reg_314 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln541_fu_109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Val2_38_fu_73_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal index_fu_99_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal xf_sig_V_fu_134_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_s_fu_139_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_70_fu_149_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal sext_ln1204_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_161_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_71_fu_179_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln214_fu_194_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln214_fu_190_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1019_6_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xf_exp_V_fu_199_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zeros_fu_169_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_fu_213_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln1669_fu_219_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal xf_exp_V_2_fu_205_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_19_fu_223_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal p_Result_72_fu_229_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln1035_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1035_1_fu_119_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln1035_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1023_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln1019_fu_124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_2_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln526_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln1035_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_266_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln526_1_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1035_fu_280_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln1035_1_fu_288_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_generic_modf_double_s_mask_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;



begin
    mask_table_U : component top_module_generic_modf_double_s_mask_table_ROM_AUTO_1R
    generic map (
        DataWidth => 52,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mask_table_address0,
        ce0 => mask_table_ce0,
        q0 => mask_table_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_return_preg <= select_ln1035_1_fu_288_p3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                xs_exp_V_reg_306 <= p_Val2_38_fu_73_p1(62 downto 52);
                xs_sig_V_reg_314 <= xs_sig_V_fu_95_p1;
                xs_sign_V_reg_300 <= p_Val2_38_fu_73_p1(63 downto 63);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln214_fu_194_p2 <= std_logic_vector(unsigned(xs_exp_V_reg_306) + unsigned(ap_const_lv11_7FF));
    and_ln18_1_fu_254_p2 <= (icmp_ln1023_fu_129_p2 and icmp_ln1019_fu_124_p2);
    and_ln18_2_fu_260_p2 <= (and_ln18_fu_248_p2 and and_ln18_1_fu_254_p2);
    and_ln18_fu_248_p2 <= (xor_ln1035_fu_242_p2 and icmp_ln1035_1_fu_119_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, select_ln1035_1_fu_288_p3, ap_return_preg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            ap_return <= select_ln1035_1_fu_288_p3;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    bitcast_ln526_1_fu_238_p1 <= p_Result_72_fu_229_p4;
    bitcast_ln526_fu_186_p1 <= p_Result_71_fu_179_p3;
    icmp_ln1019_6_fu_173_p2 <= "1" when (xf_sig_V_fu_134_p2 = ap_const_lv52_0) else "0";
    icmp_ln1019_fu_124_p2 <= "1" when (xs_exp_V_reg_306 = ap_const_lv11_7FF) else "0";
    icmp_ln1023_fu_129_p2 <= "0" when (xs_sig_V_reg_314 = ap_const_lv52_0) else "1";
    icmp_ln1035_1_fu_119_p2 <= "1" when (unsigned(xs_exp_V_reg_306) > unsigned(ap_const_lv11_433)) else "0";
    icmp_ln1035_fu_114_p2 <= "1" when (unsigned(xs_exp_V_reg_306) < unsigned(ap_const_lv11_3FF)) else "0";
    index_fu_99_p4 <= p_Val2_38_fu_73_p1(57 downto 52);
    mask_table_address0 <= zext_ln541_fu_109_p1(6 - 1 downto 0);

    mask_table_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mask_table_ce0 <= ap_const_logic_1;
        else 
            mask_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1035_fu_274_p2 <= (icmp_ln1035_fu_114_p2 or icmp_ln1035_1_fu_119_p2);
    p_Result_70_fu_149_p3 <= (ap_const_lv1_1 & p_Result_s_fu_139_p4);
    p_Result_71_fu_179_p3 <= (xs_sign_V_reg_300 & ap_const_lv63_0);
    p_Result_72_fu_229_p4 <= ((xs_sign_V_reg_300 & xf_exp_V_2_fu_205_p3) & r_V_19_fu_223_p2);
    
    p_Result_s_fu_139_p4_proc : process(xf_sig_V_fu_134_p2)
    variable vlo_cpy : STD_LOGIC_VECTOR(52+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(52+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(52 - 1 downto 0);
    variable p_Result_s_fu_139_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(52 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(52 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(52 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(6 - 1 downto 0) := ap_const_lv32_33(6 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(6 - 1 downto 0) := ap_const_lv32_0(6 - 1 downto 0);
        v0_cpy := xf_sig_V_fu_134_p2;
        if (vlo_cpy(6 - 1 downto 0) > vhi_cpy(6 - 1 downto 0)) then
            vhi_cpy(6-1 downto 0) := std_logic_vector(52-1-unsigned(ap_const_lv32_0(6-1 downto 0)));
            vlo_cpy(6-1 downto 0) := std_logic_vector(52-1-unsigned(ap_const_lv32_33(6-1 downto 0)));
            for p_Result_s_fu_139_p4_i in 0 to 52-1 loop
                v0_cpy(p_Result_s_fu_139_p4_i) := xf_sig_V_fu_134_p2(52-1-p_Result_s_fu_139_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(6-1 downto 0)))));

        section := (others=>'0');
        section(6-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(6-1 downto 0)) - unsigned(vlo_cpy(6-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(31-1 downto 0)))));
        res_mask := res_mask(52-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_139_p4 <= resvalue(52-1 downto 0);
    end process;

    p_Val2_38_fu_73_p1 <= x;
    r_V_19_fu_223_p2 <= std_logic_vector(shift_left(unsigned(r_V_fu_213_p2),to_integer(unsigned('0' & zext_ln1669_fu_219_p1(31-1 downto 0)))));
    r_V_fu_213_p2 <= std_logic_vector(shift_left(unsigned(xf_sig_V_fu_134_p2),to_integer(unsigned('0' & ap_const_lv52_1(31-1 downto 0)))));
    select_ln1035_1_fu_288_p3 <= 
        x when (icmp_ln1035_fu_114_p2(0) = '1') else 
        select_ln1035_fu_280_p3;
    select_ln1035_fu_280_p3 <= 
        select_ln18_fu_266_p3 when (or_ln1035_fu_274_p2(0) = '1') else 
        bitcast_ln526_1_fu_238_p1;
    select_ln18_fu_266_p3 <= 
        ap_const_lv64_7FFFFFFFFFFFFFFF when (and_ln18_2_fu_260_p2(0) = '1') else 
        bitcast_ln526_fu_186_p1;
        sext_ln1204_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Result_70_fu_149_p3),64));

    
    tmp_fu_161_p3_proc : process(sext_ln1204_fu_157_p1)
    begin
        tmp_fu_161_p3 <= std_logic_vector(to_unsigned(64, 64));
        for i in 0 to 64 - 1 loop
            if sext_ln1204_fu_157_p1(i) = '1' then
                tmp_fu_161_p3 <= std_logic_vector(to_unsigned(i,64));
                exit;
            end if;
        end loop;
    end process;

    trunc_ln214_fu_190_p1 <= tmp_fu_161_p3(11 - 1 downto 0);
    xf_exp_V_2_fu_205_p3 <= 
        ap_const_lv11_0 when (icmp_ln1019_6_fu_173_p2(0) = '1') else 
        xf_exp_V_fu_199_p2;
    xf_exp_V_fu_199_p2 <= std_logic_vector(unsigned(add_ln214_fu_194_p2) - unsigned(trunc_ln214_fu_190_p1));
    xf_sig_V_fu_134_p2 <= (xs_sig_V_reg_314 and mask_table_q0);
    xor_ln1035_fu_242_p2 <= (icmp_ln1035_fu_114_p2 xor ap_const_lv1_1);
    xs_sig_V_fu_95_p1 <= p_Val2_38_fu_73_p1(52 - 1 downto 0);
    zeros_fu_169_p1 <= tmp_fu_161_p3(32 - 1 downto 0);
    zext_ln1669_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zeros_fu_169_p1),52));
    zext_ln541_fu_109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_99_p4),64));
end behav;
