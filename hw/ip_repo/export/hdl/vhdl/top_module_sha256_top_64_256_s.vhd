-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_sha256_top_64_256_s is
port (
    msg_strm5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    msg_strm5_empty_n : IN STD_LOGIC;
    msg_strm5_read : OUT STD_LOGIC;
    len_strm6_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    len_strm6_empty_n : IN STD_LOGIC;
    len_strm6_read : OUT STD_LOGIC;
    end_len_strm7_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    end_len_strm7_empty_n : IN STD_LOGIC;
    end_len_strm7_read : OUT STD_LOGIC;
    hash_strm8_din : OUT STD_LOGIC_VECTOR (255 downto 0);
    hash_strm8_full_n : IN STD_LOGIC;
    hash_strm8_write : OUT STD_LOGIC;
    end_hash_strm9_din : OUT STD_LOGIC_VECTOR (0 downto 0);
    end_hash_strm9_full_n : IN STD_LOGIC;
    end_hash_strm9_write : OUT STD_LOGIC;
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC );
end;


architecture behav of top_module_sha256_top_64_256_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_logic_0 : STD_LOGIC := '0';

attribute shreg_extract : string;
    signal preProcessing_U0_ap_start : STD_LOGIC;
    signal preProcessing_U0_start_full_n : STD_LOGIC;
    signal preProcessing_U0_ap_done : STD_LOGIC;
    signal preProcessing_U0_ap_continue : STD_LOGIC;
    signal preProcessing_U0_ap_idle : STD_LOGIC;
    signal preProcessing_U0_ap_ready : STD_LOGIC;
    signal preProcessing_U0_start_out : STD_LOGIC;
    signal preProcessing_U0_start_write : STD_LOGIC;
    signal preProcessing_U0_msg_strm5_read : STD_LOGIC;
    signal preProcessing_U0_len_strm6_read : STD_LOGIC;
    signal preProcessing_U0_end_len_strm7_read : STD_LOGIC;
    signal preProcessing_U0_blk_strm_din : STD_LOGIC_VECTOR (511 downto 0);
    signal preProcessing_U0_blk_strm_write : STD_LOGIC;
    signal preProcessing_U0_nblk_strm8_din : STD_LOGIC_VECTOR (63 downto 0);
    signal preProcessing_U0_nblk_strm8_write : STD_LOGIC;
    signal preProcessing_U0_end_nblk_strm11_din : STD_LOGIC_VECTOR (0 downto 0);
    signal preProcessing_U0_end_nblk_strm11_write : STD_LOGIC;
    signal dup_strm_U0_ap_start : STD_LOGIC;
    signal dup_strm_U0_ap_done : STD_LOGIC;
    signal dup_strm_U0_ap_continue : STD_LOGIC;
    signal dup_strm_U0_ap_idle : STD_LOGIC;
    signal dup_strm_U0_ap_ready : STD_LOGIC;
    signal dup_strm_U0_start_out : STD_LOGIC;
    signal dup_strm_U0_start_write : STD_LOGIC;
    signal dup_strm_U0_nblk_strm8_read : STD_LOGIC;
    signal dup_strm_U0_end_nblk_strm11_read : STD_LOGIC;
    signal dup_strm_U0_nblk_strm19_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dup_strm_U0_nblk_strm19_write : STD_LOGIC;
    signal dup_strm_U0_end_nblk_strm112_din : STD_LOGIC_VECTOR (0 downto 0);
    signal dup_strm_U0_end_nblk_strm112_write : STD_LOGIC;
    signal dup_strm_U0_nblk_strm210_din : STD_LOGIC_VECTOR (63 downto 0);
    signal dup_strm_U0_nblk_strm210_write : STD_LOGIC;
    signal dup_strm_U0_end_nblk_strm213_din : STD_LOGIC_VECTOR (0 downto 0);
    signal dup_strm_U0_end_nblk_strm213_write : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_start : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_done : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_continue : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_idle : STD_LOGIC;
    signal generateMsgSchedule_U0_ap_ready : STD_LOGIC;
    signal generateMsgSchedule_U0_blk_strm_read : STD_LOGIC;
    signal generateMsgSchedule_U0_nblk_strm19_read : STD_LOGIC;
    signal generateMsgSchedule_U0_end_nblk_strm112_read : STD_LOGIC;
    signal generateMsgSchedule_U0_w_strm14_din : STD_LOGIC_VECTOR (31 downto 0);
    signal generateMsgSchedule_U0_w_strm14_write : STD_LOGIC;
    signal sha256Digest_256_U0_ap_start : STD_LOGIC;
    signal sha256Digest_256_U0_ap_done : STD_LOGIC;
    signal sha256Digest_256_U0_ap_continue : STD_LOGIC;
    signal sha256Digest_256_U0_ap_idle : STD_LOGIC;
    signal sha256Digest_256_U0_ap_ready : STD_LOGIC;
    signal sha256Digest_256_U0_nblk_strm210_read : STD_LOGIC;
    signal sha256Digest_256_U0_end_nblk_strm213_read : STD_LOGIC;
    signal sha256Digest_256_U0_w_strm14_read : STD_LOGIC;
    signal sha256Digest_256_U0_hash_strm8_din : STD_LOGIC_VECTOR (255 downto 0);
    signal sha256Digest_256_U0_hash_strm8_write : STD_LOGIC;
    signal sha256Digest_256_U0_end_hash_strm9_din : STD_LOGIC_VECTOR (0 downto 0);
    signal sha256Digest_256_U0_end_hash_strm9_write : STD_LOGIC;
    signal blk_strm_full_n : STD_LOGIC;
    signal blk_strm_dout : STD_LOGIC_VECTOR (511 downto 0);
    signal blk_strm_num_data_valid : STD_LOGIC_VECTOR (13 downto 0);
    signal blk_strm_fifo_cap : STD_LOGIC_VECTOR (13 downto 0);
    signal blk_strm_empty_n : STD_LOGIC;
    signal nblk_strm_full_n : STD_LOGIC;
    signal nblk_strm_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal nblk_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm_empty_n : STD_LOGIC;
    signal end_nblk_strm_full_n : STD_LOGIC;
    signal end_nblk_strm_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm_empty_n : STD_LOGIC;
    signal nblk_strm1_full_n : STD_LOGIC;
    signal nblk_strm1_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal nblk_strm1_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm1_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm1_empty_n : STD_LOGIC;
    signal end_nblk_strm1_full_n : STD_LOGIC;
    signal end_nblk_strm1_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm1_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm1_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm1_empty_n : STD_LOGIC;
    signal nblk_strm2_full_n : STD_LOGIC;
    signal nblk_strm2_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal nblk_strm2_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm2_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal nblk_strm2_empty_n : STD_LOGIC;
    signal end_nblk_strm2_full_n : STD_LOGIC;
    signal end_nblk_strm2_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal end_nblk_strm2_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm2_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal end_nblk_strm2_empty_n : STD_LOGIC;
    signal w_strm_full_n : STD_LOGIC;
    signal w_strm_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal w_strm_num_data_valid : STD_LOGIC_VECTOR (5 downto 0);
    signal w_strm_fifo_cap : STD_LOGIC_VECTOR (5 downto 0);
    signal w_strm_empty_n : STD_LOGIC;
    signal start_for_dup_strm_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dup_strm_U0_full_n : STD_LOGIC;
    signal start_for_dup_strm_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_dup_strm_U0_empty_n : STD_LOGIC;
    signal start_for_generateMsgSchedule_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_generateMsgSchedule_U0_full_n : STD_LOGIC;
    signal start_for_generateMsgSchedule_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_generateMsgSchedule_U0_empty_n : STD_LOGIC;
    signal start_for_sha256Digest_256_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sha256Digest_256_U0_full_n : STD_LOGIC;
    signal start_for_sha256Digest_256_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sha256Digest_256_U0_empty_n : STD_LOGIC;

    component top_module_preProcessing IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        msg_strm5_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        msg_strm5_num_data_valid : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm5_fifo_cap : IN STD_LOGIC_VECTOR (15 downto 0);
        msg_strm5_empty_n : IN STD_LOGIC;
        msg_strm5_read : OUT STD_LOGIC;
        len_strm6_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        len_strm6_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm6_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        len_strm6_empty_n : IN STD_LOGIC;
        len_strm6_read : OUT STD_LOGIC;
        end_len_strm7_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_len_strm7_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm7_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_len_strm7_empty_n : IN STD_LOGIC;
        end_len_strm7_read : OUT STD_LOGIC;
        blk_strm_din : OUT STD_LOGIC_VECTOR (511 downto 0);
        blk_strm_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        blk_strm_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
        blk_strm_full_n : IN STD_LOGIC;
        blk_strm_write : OUT STD_LOGIC;
        nblk_strm8_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm8_full_n : IN STD_LOGIC;
        nblk_strm8_write : OUT STD_LOGIC;
        end_nblk_strm11_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm11_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm11_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm11_full_n : IN STD_LOGIC;
        end_nblk_strm11_write : OUT STD_LOGIC );
    end component;


    component top_module_dup_strm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        nblk_strm8_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm8_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm8_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm8_empty_n : IN STD_LOGIC;
        nblk_strm8_read : OUT STD_LOGIC;
        end_nblk_strm11_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm11_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm11_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm11_empty_n : IN STD_LOGIC;
        end_nblk_strm11_read : OUT STD_LOGIC;
        nblk_strm19_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm19_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm19_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm19_full_n : IN STD_LOGIC;
        nblk_strm19_write : OUT STD_LOGIC;
        end_nblk_strm112_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm112_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm112_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm112_full_n : IN STD_LOGIC;
        end_nblk_strm112_write : OUT STD_LOGIC;
        nblk_strm210_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm210_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm210_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm210_full_n : IN STD_LOGIC;
        nblk_strm210_write : OUT STD_LOGIC;
        end_nblk_strm213_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm213_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm213_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm213_full_n : IN STD_LOGIC;
        end_nblk_strm213_write : OUT STD_LOGIC );
    end component;


    component top_module_generateMsgSchedule IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        blk_strm_dout : IN STD_LOGIC_VECTOR (511 downto 0);
        blk_strm_num_data_valid : IN STD_LOGIC_VECTOR (13 downto 0);
        blk_strm_fifo_cap : IN STD_LOGIC_VECTOR (13 downto 0);
        blk_strm_empty_n : IN STD_LOGIC;
        blk_strm_read : OUT STD_LOGIC;
        nblk_strm19_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm19_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm19_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm19_empty_n : IN STD_LOGIC;
        nblk_strm19_read : OUT STD_LOGIC;
        end_nblk_strm112_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm112_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm112_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm112_empty_n : IN STD_LOGIC;
        end_nblk_strm112_read : OUT STD_LOGIC;
        w_strm14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        w_strm14_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm14_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm14_full_n : IN STD_LOGIC;
        w_strm14_write : OUT STD_LOGIC );
    end component;


    component top_module_sha256Digest_256_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        nblk_strm210_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        nblk_strm210_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm210_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        nblk_strm210_empty_n : IN STD_LOGIC;
        nblk_strm210_read : OUT STD_LOGIC;
        end_nblk_strm213_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_nblk_strm213_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm213_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        end_nblk_strm213_empty_n : IN STD_LOGIC;
        end_nblk_strm213_read : OUT STD_LOGIC;
        w_strm14_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        w_strm14_num_data_valid : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm14_fifo_cap : IN STD_LOGIC_VECTOR (5 downto 0);
        w_strm14_empty_n : IN STD_LOGIC;
        w_strm14_read : OUT STD_LOGIC;
        hash_strm8_din : OUT STD_LOGIC_VECTOR (255 downto 0);
        hash_strm8_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm8_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        hash_strm8_full_n : IN STD_LOGIC;
        hash_strm8_write : OUT STD_LOGIC;
        end_hash_strm9_din : OUT STD_LOGIC_VECTOR (0 downto 0);
        end_hash_strm9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm9_full_n : IN STD_LOGIC;
        end_hash_strm9_write : OUT STD_LOGIC );
    end component;


    component top_module_fifo_w512_d4097_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (511 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (511 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (13 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w64_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w1_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_fifo_w32_d32_D IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_num_data_valid : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_fifo_cap : OUT STD_LOGIC_VECTOR (5 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_start_for_dup_strm_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_start_for_generateMsgSchedule_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component top_module_start_for_sha256Digest_256_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    preProcessing_U0 : component top_module_preProcessing
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => preProcessing_U0_ap_start,
        start_full_n => preProcessing_U0_start_full_n,
        ap_done => preProcessing_U0_ap_done,
        ap_continue => preProcessing_U0_ap_continue,
        ap_idle => preProcessing_U0_ap_idle,
        ap_ready => preProcessing_U0_ap_ready,
        start_out => preProcessing_U0_start_out,
        start_write => preProcessing_U0_start_write,
        msg_strm5_dout => msg_strm5_dout,
        msg_strm5_num_data_valid => ap_const_lv16_0,
        msg_strm5_fifo_cap => ap_const_lv16_0,
        msg_strm5_empty_n => msg_strm5_empty_n,
        msg_strm5_read => preProcessing_U0_msg_strm5_read,
        len_strm6_dout => len_strm6_dout,
        len_strm6_num_data_valid => ap_const_lv2_0,
        len_strm6_fifo_cap => ap_const_lv2_0,
        len_strm6_empty_n => len_strm6_empty_n,
        len_strm6_read => preProcessing_U0_len_strm6_read,
        end_len_strm7_dout => end_len_strm7_dout,
        end_len_strm7_num_data_valid => ap_const_lv2_0,
        end_len_strm7_fifo_cap => ap_const_lv2_0,
        end_len_strm7_empty_n => end_len_strm7_empty_n,
        end_len_strm7_read => preProcessing_U0_end_len_strm7_read,
        blk_strm_din => preProcessing_U0_blk_strm_din,
        blk_strm_num_data_valid => blk_strm_num_data_valid,
        blk_strm_fifo_cap => blk_strm_fifo_cap,
        blk_strm_full_n => blk_strm_full_n,
        blk_strm_write => preProcessing_U0_blk_strm_write,
        nblk_strm8_din => preProcessing_U0_nblk_strm8_din,
        nblk_strm8_num_data_valid => nblk_strm_num_data_valid,
        nblk_strm8_fifo_cap => nblk_strm_fifo_cap,
        nblk_strm8_full_n => nblk_strm_full_n,
        nblk_strm8_write => preProcessing_U0_nblk_strm8_write,
        end_nblk_strm11_din => preProcessing_U0_end_nblk_strm11_din,
        end_nblk_strm11_num_data_valid => end_nblk_strm_num_data_valid,
        end_nblk_strm11_fifo_cap => end_nblk_strm_fifo_cap,
        end_nblk_strm11_full_n => end_nblk_strm_full_n,
        end_nblk_strm11_write => preProcessing_U0_end_nblk_strm11_write);

    dup_strm_U0 : component top_module_dup_strm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => dup_strm_U0_ap_start,
        start_full_n => start_for_sha256Digest_256_U0_full_n,
        ap_done => dup_strm_U0_ap_done,
        ap_continue => dup_strm_U0_ap_continue,
        ap_idle => dup_strm_U0_ap_idle,
        ap_ready => dup_strm_U0_ap_ready,
        start_out => dup_strm_U0_start_out,
        start_write => dup_strm_U0_start_write,
        nblk_strm8_dout => nblk_strm_dout,
        nblk_strm8_num_data_valid => nblk_strm_num_data_valid,
        nblk_strm8_fifo_cap => nblk_strm_fifo_cap,
        nblk_strm8_empty_n => nblk_strm_empty_n,
        nblk_strm8_read => dup_strm_U0_nblk_strm8_read,
        end_nblk_strm11_dout => end_nblk_strm_dout,
        end_nblk_strm11_num_data_valid => end_nblk_strm_num_data_valid,
        end_nblk_strm11_fifo_cap => end_nblk_strm_fifo_cap,
        end_nblk_strm11_empty_n => end_nblk_strm_empty_n,
        end_nblk_strm11_read => dup_strm_U0_end_nblk_strm11_read,
        nblk_strm19_din => dup_strm_U0_nblk_strm19_din,
        nblk_strm19_num_data_valid => nblk_strm1_num_data_valid,
        nblk_strm19_fifo_cap => nblk_strm1_fifo_cap,
        nblk_strm19_full_n => nblk_strm1_full_n,
        nblk_strm19_write => dup_strm_U0_nblk_strm19_write,
        end_nblk_strm112_din => dup_strm_U0_end_nblk_strm112_din,
        end_nblk_strm112_num_data_valid => end_nblk_strm1_num_data_valid,
        end_nblk_strm112_fifo_cap => end_nblk_strm1_fifo_cap,
        end_nblk_strm112_full_n => end_nblk_strm1_full_n,
        end_nblk_strm112_write => dup_strm_U0_end_nblk_strm112_write,
        nblk_strm210_din => dup_strm_U0_nblk_strm210_din,
        nblk_strm210_num_data_valid => nblk_strm2_num_data_valid,
        nblk_strm210_fifo_cap => nblk_strm2_fifo_cap,
        nblk_strm210_full_n => nblk_strm2_full_n,
        nblk_strm210_write => dup_strm_U0_nblk_strm210_write,
        end_nblk_strm213_din => dup_strm_U0_end_nblk_strm213_din,
        end_nblk_strm213_num_data_valid => end_nblk_strm2_num_data_valid,
        end_nblk_strm213_fifo_cap => end_nblk_strm2_fifo_cap,
        end_nblk_strm213_full_n => end_nblk_strm2_full_n,
        end_nblk_strm213_write => dup_strm_U0_end_nblk_strm213_write);

    generateMsgSchedule_U0 : component top_module_generateMsgSchedule
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => generateMsgSchedule_U0_ap_start,
        ap_done => generateMsgSchedule_U0_ap_done,
        ap_continue => generateMsgSchedule_U0_ap_continue,
        ap_idle => generateMsgSchedule_U0_ap_idle,
        ap_ready => generateMsgSchedule_U0_ap_ready,
        blk_strm_dout => blk_strm_dout,
        blk_strm_num_data_valid => blk_strm_num_data_valid,
        blk_strm_fifo_cap => blk_strm_fifo_cap,
        blk_strm_empty_n => blk_strm_empty_n,
        blk_strm_read => generateMsgSchedule_U0_blk_strm_read,
        nblk_strm19_dout => nblk_strm1_dout,
        nblk_strm19_num_data_valid => nblk_strm1_num_data_valid,
        nblk_strm19_fifo_cap => nblk_strm1_fifo_cap,
        nblk_strm19_empty_n => nblk_strm1_empty_n,
        nblk_strm19_read => generateMsgSchedule_U0_nblk_strm19_read,
        end_nblk_strm112_dout => end_nblk_strm1_dout,
        end_nblk_strm112_num_data_valid => end_nblk_strm1_num_data_valid,
        end_nblk_strm112_fifo_cap => end_nblk_strm1_fifo_cap,
        end_nblk_strm112_empty_n => end_nblk_strm1_empty_n,
        end_nblk_strm112_read => generateMsgSchedule_U0_end_nblk_strm112_read,
        w_strm14_din => generateMsgSchedule_U0_w_strm14_din,
        w_strm14_num_data_valid => w_strm_num_data_valid,
        w_strm14_fifo_cap => w_strm_fifo_cap,
        w_strm14_full_n => w_strm_full_n,
        w_strm14_write => generateMsgSchedule_U0_w_strm14_write);

    sha256Digest_256_U0 : component top_module_sha256Digest_256_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => sha256Digest_256_U0_ap_start,
        ap_done => sha256Digest_256_U0_ap_done,
        ap_continue => sha256Digest_256_U0_ap_continue,
        ap_idle => sha256Digest_256_U0_ap_idle,
        ap_ready => sha256Digest_256_U0_ap_ready,
        nblk_strm210_dout => nblk_strm2_dout,
        nblk_strm210_num_data_valid => nblk_strm2_num_data_valid,
        nblk_strm210_fifo_cap => nblk_strm2_fifo_cap,
        nblk_strm210_empty_n => nblk_strm2_empty_n,
        nblk_strm210_read => sha256Digest_256_U0_nblk_strm210_read,
        end_nblk_strm213_dout => end_nblk_strm2_dout,
        end_nblk_strm213_num_data_valid => end_nblk_strm2_num_data_valid,
        end_nblk_strm213_fifo_cap => end_nblk_strm2_fifo_cap,
        end_nblk_strm213_empty_n => end_nblk_strm2_empty_n,
        end_nblk_strm213_read => sha256Digest_256_U0_end_nblk_strm213_read,
        w_strm14_dout => w_strm_dout,
        w_strm14_num_data_valid => w_strm_num_data_valid,
        w_strm14_fifo_cap => w_strm_fifo_cap,
        w_strm14_empty_n => w_strm_empty_n,
        w_strm14_read => sha256Digest_256_U0_w_strm14_read,
        hash_strm8_din => sha256Digest_256_U0_hash_strm8_din,
        hash_strm8_num_data_valid => ap_const_lv2_0,
        hash_strm8_fifo_cap => ap_const_lv2_0,
        hash_strm8_full_n => hash_strm8_full_n,
        hash_strm8_write => sha256Digest_256_U0_hash_strm8_write,
        end_hash_strm9_din => sha256Digest_256_U0_end_hash_strm9_din,
        end_hash_strm9_num_data_valid => ap_const_lv2_0,
        end_hash_strm9_fifo_cap => ap_const_lv2_0,
        end_hash_strm9_full_n => end_hash_strm9_full_n,
        end_hash_strm9_write => sha256Digest_256_U0_end_hash_strm9_write);

    blk_strm_U : component top_module_fifo_w512_d4097_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_blk_strm_din,
        if_full_n => blk_strm_full_n,
        if_write => preProcessing_U0_blk_strm_write,
        if_dout => blk_strm_dout,
        if_num_data_valid => blk_strm_num_data_valid,
        if_fifo_cap => blk_strm_fifo_cap,
        if_empty_n => blk_strm_empty_n,
        if_read => generateMsgSchedule_U0_blk_strm_read);

    nblk_strm_U : component top_module_fifo_w64_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_nblk_strm8_din,
        if_full_n => nblk_strm_full_n,
        if_write => preProcessing_U0_nblk_strm8_write,
        if_dout => nblk_strm_dout,
        if_num_data_valid => nblk_strm_num_data_valid,
        if_fifo_cap => nblk_strm_fifo_cap,
        if_empty_n => nblk_strm_empty_n,
        if_read => dup_strm_U0_nblk_strm8_read);

    end_nblk_strm_U : component top_module_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => preProcessing_U0_end_nblk_strm11_din,
        if_full_n => end_nblk_strm_full_n,
        if_write => preProcessing_U0_end_nblk_strm11_write,
        if_dout => end_nblk_strm_dout,
        if_num_data_valid => end_nblk_strm_num_data_valid,
        if_fifo_cap => end_nblk_strm_fifo_cap,
        if_empty_n => end_nblk_strm_empty_n,
        if_read => dup_strm_U0_end_nblk_strm11_read);

    nblk_strm1_U : component top_module_fifo_w64_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_U0_nblk_strm19_din,
        if_full_n => nblk_strm1_full_n,
        if_write => dup_strm_U0_nblk_strm19_write,
        if_dout => nblk_strm1_dout,
        if_num_data_valid => nblk_strm1_num_data_valid,
        if_fifo_cap => nblk_strm1_fifo_cap,
        if_empty_n => nblk_strm1_empty_n,
        if_read => generateMsgSchedule_U0_nblk_strm19_read);

    end_nblk_strm1_U : component top_module_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_U0_end_nblk_strm112_din,
        if_full_n => end_nblk_strm1_full_n,
        if_write => dup_strm_U0_end_nblk_strm112_write,
        if_dout => end_nblk_strm1_dout,
        if_num_data_valid => end_nblk_strm1_num_data_valid,
        if_fifo_cap => end_nblk_strm1_fifo_cap,
        if_empty_n => end_nblk_strm1_empty_n,
        if_read => generateMsgSchedule_U0_end_nblk_strm112_read);

    nblk_strm2_U : component top_module_fifo_w64_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_U0_nblk_strm210_din,
        if_full_n => nblk_strm2_full_n,
        if_write => dup_strm_U0_nblk_strm210_write,
        if_dout => nblk_strm2_dout,
        if_num_data_valid => nblk_strm2_num_data_valid,
        if_fifo_cap => nblk_strm2_fifo_cap,
        if_empty_n => nblk_strm2_empty_n,
        if_read => sha256Digest_256_U0_nblk_strm210_read);

    end_nblk_strm2_U : component top_module_fifo_w1_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => dup_strm_U0_end_nblk_strm213_din,
        if_full_n => end_nblk_strm2_full_n,
        if_write => dup_strm_U0_end_nblk_strm213_write,
        if_dout => end_nblk_strm2_dout,
        if_num_data_valid => end_nblk_strm2_num_data_valid,
        if_fifo_cap => end_nblk_strm2_fifo_cap,
        if_empty_n => end_nblk_strm2_empty_n,
        if_read => sha256Digest_256_U0_end_nblk_strm213_read);

    w_strm_U : component top_module_fifo_w32_d32_D
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => generateMsgSchedule_U0_w_strm14_din,
        if_full_n => w_strm_full_n,
        if_write => generateMsgSchedule_U0_w_strm14_write,
        if_dout => w_strm_dout,
        if_num_data_valid => w_strm_num_data_valid,
        if_fifo_cap => w_strm_fifo_cap,
        if_empty_n => w_strm_empty_n,
        if_read => sha256Digest_256_U0_w_strm14_read);

    start_for_dup_strm_U0_U : component top_module_start_for_dup_strm_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_dup_strm_U0_din,
        if_full_n => start_for_dup_strm_U0_full_n,
        if_write => preProcessing_U0_start_write,
        if_dout => start_for_dup_strm_U0_dout,
        if_empty_n => start_for_dup_strm_U0_empty_n,
        if_read => dup_strm_U0_ap_ready);

    start_for_generateMsgSchedule_U0_U : component top_module_start_for_generateMsgSchedule_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_generateMsgSchedule_U0_din,
        if_full_n => start_for_generateMsgSchedule_U0_full_n,
        if_write => preProcessing_U0_start_write,
        if_dout => start_for_generateMsgSchedule_U0_dout,
        if_empty_n => start_for_generateMsgSchedule_U0_empty_n,
        if_read => generateMsgSchedule_U0_ap_ready);

    start_for_sha256Digest_256_U0_U : component top_module_start_for_sha256Digest_256_U0
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sha256Digest_256_U0_din,
        if_full_n => start_for_sha256Digest_256_U0_full_n,
        if_write => dup_strm_U0_start_write,
        if_dout => start_for_sha256Digest_256_U0_dout,
        if_empty_n => start_for_sha256Digest_256_U0_empty_n,
        if_read => sha256Digest_256_U0_ap_ready);




    ap_done <= sha256Digest_256_U0_ap_done;
    ap_idle <= (sha256Digest_256_U0_ap_idle and preProcessing_U0_ap_idle and generateMsgSchedule_U0_ap_idle and dup_strm_U0_ap_idle);
    ap_ready <= preProcessing_U0_ap_ready;
    dup_strm_U0_ap_continue <= ap_const_logic_1;
    dup_strm_U0_ap_start <= start_for_dup_strm_U0_empty_n;
    end_hash_strm9_din <= sha256Digest_256_U0_end_hash_strm9_din;
    end_hash_strm9_write <= sha256Digest_256_U0_end_hash_strm9_write;
    end_len_strm7_read <= preProcessing_U0_end_len_strm7_read;
    generateMsgSchedule_U0_ap_continue <= ap_const_logic_1;
    generateMsgSchedule_U0_ap_start <= start_for_generateMsgSchedule_U0_empty_n;
    hash_strm8_din <= sha256Digest_256_U0_hash_strm8_din;
    hash_strm8_write <= sha256Digest_256_U0_hash_strm8_write;
    len_strm6_read <= preProcessing_U0_len_strm6_read;
    msg_strm5_read <= preProcessing_U0_msg_strm5_read;
    preProcessing_U0_ap_continue <= ap_const_logic_1;
    preProcessing_U0_ap_start <= ap_start;
    preProcessing_U0_start_full_n <= (start_for_generateMsgSchedule_U0_full_n and start_for_dup_strm_U0_full_n);
    sha256Digest_256_U0_ap_continue <= ap_continue;
    sha256Digest_256_U0_ap_start <= start_for_sha256Digest_256_U0_empty_n;
    start_for_dup_strm_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_generateMsgSchedule_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sha256Digest_256_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
