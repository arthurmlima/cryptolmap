-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity top_module_set_hash_stream is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_perm : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_perm_ap_vld : OUT STD_LOGIC;
    hash_strm8_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    hash_strm8_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    hash_strm8_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    hash_strm8_empty_n : IN STD_LOGIC;
    hash_strm8_read : OUT STD_LOGIC;
    end_hash_strm9_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    end_hash_strm9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
    end_hash_strm9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
    end_hash_strm9_empty_n : IN STD_LOGIC;
    end_hash_strm9_read : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of top_module_set_hash_stream is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_3E99999A : STD_LOGIC_VECTOR (31 downto 0) := "00111110100110011001100110011010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_3DCCCCCD : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011001100110011001101";
    constant ap_const_lv32_467A0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000110011110100000000000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal hash_strm8_blk_n : STD_LOGIC;
    signal h256_V_reg_134 : STD_LOGIC_VECTOR (255 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_95_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_98_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv1_reg_155 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_85_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_160 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fu_90_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div1_reg_165 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_done : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_idle : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_ready : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_end_hash_strm9_read : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_done : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_idle : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_ready : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_aux_perm_out : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_aux_perm_out_ap_vld : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_done : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_idle : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_ready : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_aux_diff_out : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_aux_diff_out_ap_vld : STD_LOGIC;
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg : STD_LOGIC := '0';
    signal grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1 : BOOLEAN;
    signal bitcast_ln54_fu_117_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_perm_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_95_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_98_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_75_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_80_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component top_module_set_hash_stream_Pipeline_VITIS_LOOP_40_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        end_hash_strm9_dout : IN STD_LOGIC_VECTOR (0 downto 0);
        end_hash_strm9_num_data_valid : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm9_fifo_cap : IN STD_LOGIC_VECTOR (1 downto 0);
        end_hash_strm9_empty_n : IN STD_LOGIC;
        end_hash_strm9_read : OUT STD_LOGIC );
    end component;


    component top_module_set_hash_stream_Pipeline_VITIS_LOOP_44_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h256_V : IN STD_LOGIC_VECTOR (255 downto 0);
        aux_perm_out : OUT STD_LOGIC_VECTOR (11 downto 0);
        aux_perm_out_ap_vld : OUT STD_LOGIC );
    end component;


    component top_module_set_hash_stream_Pipeline_VITIS_LOOP_49_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        h256_V : IN STD_LOGIC_VECTOR (255 downto 0);
        aux_diff_out : OUT STD_LOGIC_VECTOR (11 downto 0);
        aux_diff_out_ap_vld : OUT STD_LOGIC );
    end component;


    component top_module_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_fdiv_32ns_32ns_32_6_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component top_module_uitofp_32ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57 : component top_module_set_hash_stream_Pipeline_VITIS_LOOP_40_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start,
        ap_done => grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_done,
        ap_idle => grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_idle,
        ap_ready => grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_ready,
        end_hash_strm9_dout => end_hash_strm9_dout,
        end_hash_strm9_num_data_valid => ap_const_lv2_0,
        end_hash_strm9_fifo_cap => ap_const_lv2_0,
        end_hash_strm9_empty_n => end_hash_strm9_empty_n,
        end_hash_strm9_read => grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_end_hash_strm9_read);

    grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63 : component top_module_set_hash_stream_Pipeline_VITIS_LOOP_44_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start,
        ap_done => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_done,
        ap_idle => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_idle,
        ap_ready => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_ready,
        h256_V => h256_V_reg_134,
        aux_perm_out => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_aux_perm_out,
        aux_perm_out_ap_vld => grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_aux_perm_out_ap_vld);

    grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69 : component top_module_set_hash_stream_Pipeline_VITIS_LOOP_49_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start,
        ap_done => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_done,
        ap_idle => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_idle,
        ap_ready => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_ready,
        h256_V => h256_V_reg_134,
        aux_diff_out => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_aux_diff_out,
        aux_diff_out_ap_vld => grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_aux_diff_out_ap_vld);

    fadd_32ns_32ns_32_2_full_dsp_1_U177 : component top_module_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_160,
        din1 => ap_const_lv32_3E99999A,
        ce => ap_const_logic_1,
        dout => grp_fu_75_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U178 : component top_module_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div1_reg_165,
        din1 => ap_const_lv32_3DCCCCCD,
        ce => ap_const_logic_1,
        dout => grp_fu_80_p2);

    fdiv_32ns_32ns_32_6_no_dsp_1_U179 : component top_module_fdiv_32ns_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_reg_150,
        din1 => ap_const_lv32_467A0000,
        ce => ap_const_logic_1,
        dout => grp_fu_85_p2);

    fdiv_32ns_32ns_32_6_no_dsp_1_U180 : component top_module_fdiv_32ns_32ns_32_6_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv1_reg_155,
        din1 => ap_const_lv32_467A0000,
        ce => ap_const_logic_1,
        dout => grp_fu_90_p2);

    uitofp_32ns_32_2_no_dsp_1_U181 : component top_module_uitofp_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_95_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_95_p1);

    uitofp_32ns_32_2_no_dsp_1_U182 : component top_module_uitofp_32ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_98_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_98_p1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_ready = ap_const_logic_1)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_ready = ap_const_logic_1)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_ready = ap_const_logic_1)) then 
                    grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    m_perm_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                m_perm_preg <= ap_const_lv32_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    m_perm_preg <= bitcast_ln54_fu_117_p1;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                conv1_reg_155 <= grp_fu_98_p1;
                conv_reg_150 <= grp_fu_95_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                div1_reg_165 <= grp_fu_90_p2;
                div_reg_160 <= grp_fu_85_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                h256_V_reg_134 <= hash_strm8_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, hash_strm8_empty_n, ap_CS_fsm_state3, ap_block_state3_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((hash_strm8_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg, hash_strm8_empty_n)
    begin
        if (((hash_strm8_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_on_subcall_done)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_on_subcall_done)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, hash_strm8_empty_n)
    begin
                ap_block_state1 <= ((hash_strm8_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state3_on_subcall_done_assign_proc : process(grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_done, grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_done, grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_done = ap_const_logic_0) or (grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_done = ap_const_logic_0) or (grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= grp_fu_80_p2;
    bitcast_ln54_fu_117_p1 <= grp_fu_75_p2;

    end_hash_strm9_read_assign_proc : process(grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_end_hash_strm9_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            end_hash_strm9_read <= grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_end_hash_strm9_read;
        else 
            end_hash_strm9_read <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_95_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_aux_perm_out),32));
    grp_fu_98_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_aux_diff_out),32));
    grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start <= grp_set_hash_stream_Pipeline_VITIS_LOOP_40_1_fu_57_ap_start_reg;
    grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start <= grp_set_hash_stream_Pipeline_VITIS_LOOP_44_2_fu_63_ap_start_reg;
    grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start <= grp_set_hash_stream_Pipeline_VITIS_LOOP_49_3_fu_69_ap_start_reg;

    hash_strm8_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hash_strm8_empty_n)
    begin
        if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hash_strm8_blk_n <= hash_strm8_empty_n;
        else 
            hash_strm8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    hash_strm8_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, hash_strm8_empty_n)
    begin
        if ((not(((hash_strm8_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            hash_strm8_read <= ap_const_logic_1;
        else 
            hash_strm8_read <= ap_const_logic_0;
        end if; 
    end process;


    m_perm_assign_proc : process(bitcast_ln54_fu_117_p1, m_perm_preg, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_perm <= bitcast_ln54_fu_117_p1;
        else 
            m_perm <= m_perm_preg;
        end if; 
    end process;


    m_perm_ap_vld_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            m_perm_ap_vld <= ap_const_logic_1;
        else 
            m_perm_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
